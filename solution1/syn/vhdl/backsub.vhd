-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity backsub is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_OFFSET_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_OFFSET_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_OFFSET_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_OFFSET_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_OFFSET_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_OFFSET_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_OFFSET_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_OFFSET_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32;
    C_S_AXI_CRTL_BUS_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CRTL_BUS_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_OFFSET_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GMEM_OFFSET_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_OFFSET_PROT_VALUE : INTEGER := 0 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    m_axi_gmem_offset_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_offset_AWREADY : IN STD_LOGIC;
    m_axi_gmem_offset_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_OFFSET_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_offset_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_OFFSET_ID_WIDTH-1 downto 0);
    m_axi_gmem_offset_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_offset_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_offset_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_offset_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_offset_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_offset_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_offset_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_offset_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_offset_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_OFFSET_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_offset_WVALID : OUT STD_LOGIC;
    m_axi_gmem_offset_WREADY : IN STD_LOGIC;
    m_axi_gmem_offset_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_OFFSET_DATA_WIDTH-1 downto 0);
    m_axi_gmem_offset_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_OFFSET_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_offset_WLAST : OUT STD_LOGIC;
    m_axi_gmem_offset_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_OFFSET_ID_WIDTH-1 downto 0);
    m_axi_gmem_offset_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_OFFSET_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_offset_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_offset_ARREADY : IN STD_LOGIC;
    m_axi_gmem_offset_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_OFFSET_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_offset_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_OFFSET_ID_WIDTH-1 downto 0);
    m_axi_gmem_offset_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_offset_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_offset_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_offset_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_offset_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_offset_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_offset_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_offset_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_offset_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_OFFSET_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_offset_RVALID : IN STD_LOGIC;
    m_axi_gmem_offset_RREADY : OUT STD_LOGIC;
    m_axi_gmem_offset_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_OFFSET_DATA_WIDTH-1 downto 0);
    m_axi_gmem_offset_RLAST : IN STD_LOGIC;
    m_axi_gmem_offset_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_OFFSET_ID_WIDTH-1 downto 0);
    m_axi_gmem_offset_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_OFFSET_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_offset_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_offset_BVALID : IN STD_LOGIC;
    m_axi_gmem_offset_BREADY : OUT STD_LOGIC;
    m_axi_gmem_offset_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_offset_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_OFFSET_ID_WIDTH-1 downto 0);
    m_axi_gmem_offset_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_OFFSET_BUSER_WIDTH-1 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CRTL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CRTL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CRTL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CRTL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CRTL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CRTL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CRTL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CRTL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CRTL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CRTL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CRTL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CRTL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CRTL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of backsub is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "backsub,hls_ip_2015_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.789400,HLS_SYN_LAT=7343873,HLS_SYN_TPT=none,HLS_SYN_MEM=151,HLS_SYN_DSP=19,HLS_SYN_FF=8313,HLS_SYN_LUT=13082}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000100000000";
    constant ap_ST_pp0_stg0_fsm_9 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000001000000000";
    constant ap_ST_st13_fsm_10 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000010000000000";
    constant ap_ST_st14_fsm_11 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000100000000000";
    constant ap_ST_st15_fsm_12 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000001000000000000";
    constant ap_ST_st16_fsm_13 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000010000000000000";
    constant ap_ST_st17_fsm_14 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000100000000000000";
    constant ap_ST_st18_fsm_15 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000001000000000000000";
    constant ap_ST_st19_fsm_16 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000010000000000000000";
    constant ap_ST_st20_fsm_17 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000100000000000000000";
    constant ap_ST_pp1_stg0_fsm_18 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000001000000000000000000";
    constant ap_ST_st24_fsm_19 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000010000000000000000000";
    constant ap_ST_st25_fsm_20 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000100000000000000000000";
    constant ap_ST_st26_fsm_21 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000001000000000000000000000";
    constant ap_ST_st27_fsm_22 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000010000000000000000000000";
    constant ap_ST_st28_fsm_23 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000100000000000000000000000";
    constant ap_ST_st29_fsm_24 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000001000000000000000000000000";
    constant ap_ST_st30_fsm_25 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000010000000000000000000000000";
    constant ap_ST_st31_fsm_26 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000100000000000000000000000000";
    constant ap_ST_st32_fsm_27 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000001000000000000000000000000000";
    constant ap_ST_st33_fsm_28 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000010000000000000000000000000000";
    constant ap_ST_pp2_stg0_fsm_29 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000100000000000000000000000000000";
    constant ap_ST_st37_fsm_30 : STD_LOGIC_VECTOR (40 downto 0) := "00000000001000000000000000000000000000000";
    constant ap_ST_st38_fsm_31 : STD_LOGIC_VECTOR (40 downto 0) := "00000000010000000000000000000000000000000";
    constant ap_ST_st39_fsm_32 : STD_LOGIC_VECTOR (40 downto 0) := "00000000100000000000000000000000000000000";
    constant ap_ST_st40_fsm_33 : STD_LOGIC_VECTOR (40 downto 0) := "00000001000000000000000000000000000000000";
    constant ap_ST_st41_fsm_34 : STD_LOGIC_VECTOR (40 downto 0) := "00000010000000000000000000000000000000000";
    constant ap_ST_pp3_stg0_fsm_35 : STD_LOGIC_VECTOR (40 downto 0) := "00000100000000000000000000000000000000000";
    constant ap_ST_st45_fsm_36 : STD_LOGIC_VECTOR (40 downto 0) := "00001000000000000000000000000000000000000";
    constant ap_ST_st46_fsm_37 : STD_LOGIC_VECTOR (40 downto 0) := "00010000000000000000000000000000000000000";
    constant ap_ST_st47_fsm_38 : STD_LOGIC_VECTOR (40 downto 0) := "00100000000000000000000000000000000000000";
    constant ap_ST_st48_fsm_39 : STD_LOGIC_VECTOR (40 downto 0) := "01000000000000000000000000000000000000000";
    constant ap_ST_st49_fsm_40 : STD_LOGIC_VECTOR (40 downto 0) := "10000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_708 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000011100001000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_12C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100101100";
    constant ap_const_lv32_45992000 : STD_LOGIC_VECTOR (31 downto 0) := "01000101100110010010000000000000";
    constant ap_const_lv32_3DB851EC : STD_LOGIC_VECTOR (31 downto 0) := "00111101101110000101000111101100";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv19_708 : STD_LOGIC_VECTOR (18 downto 0) := "0000000011100001000";
    constant ap_const_lv17_12C : STD_LOGIC_VECTOR (16 downto 0) := "00000000100101100";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv11_708 : STD_LOGIC_VECTOR (10 downto 0) := "11100001000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv9_12C : STD_LOGIC_VECTOR (8 downto 0) := "100101100";
    constant ap_const_lv18_1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_const_lv46_0 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000000000";
    constant ap_const_lv13_2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_const_lv13_3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000011";
    constant ap_const_lv13_4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_const_lv13_5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000101";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_59 : BOOLEAN;
    signal ap_ready : STD_LOGIC;
    signal frame_in : STD_LOGIC_VECTOR (31 downto 0);
    signal frame_out : STD_LOGIC_VECTOR (31 downto 0);
    signal init : STD_LOGIC;
    signal para : STD_LOGIC_VECTOR (31 downto 0);
    signal parameters_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal parameters_ce0 : STD_LOGIC;
    signal parameters_we0 : STD_LOGIC;
    signal parameters_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal parameters_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal parameters_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal parameters_ce1 : STD_LOGIC;
    signal parameters_we1 : STD_LOGIC;
    signal parameters_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal parameters_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_array_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal data_array_ce0 : STD_LOGIC;
    signal data_array_we0 : STD_LOGIC;
    signal data_array_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal data_array_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal matchsum_address0 : STD_LOGIC_VECTOR (17 downto 0);
    signal matchsum_ce0 : STD_LOGIC;
    signal matchsum_we0 : STD_LOGIC;
    signal matchsum_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal matchsum_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal matchsum_address1 : STD_LOGIC_VECTOR (17 downto 0);
    signal matchsum_ce1 : STD_LOGIC;
    signal matchsum_we1 : STD_LOGIC;
    signal matchsum_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal back_gauss_address0 : STD_LOGIC_VECTOR (17 downto 0);
    signal back_gauss_ce0 : STD_LOGIC;
    signal back_gauss_we0 : STD_LOGIC;
    signal back_gauss_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal back_gauss_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal back_gauss_address1 : STD_LOGIC_VECTOR (17 downto 0);
    signal back_gauss_ce1 : STD_LOGIC;
    signal back_gauss_we1 : STD_LOGIC;
    signal back_gauss_d1 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_frame_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal out_frame_ce0 : STD_LOGIC;
    signal out_frame_we0 : STD_LOGIC;
    signal out_frame_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_frame_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal backsub_AXILiteS_s_axi_U_ap_dummy_ce : STD_LOGIC;
    signal backsub_CRTL_BUS_s_axi_U_ap_dummy_ce : STD_LOGIC;
    signal gmem_AWVALID : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_WVALID : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem_WSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_WLAST : STD_LOGIC;
    signal gmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_ARVALID : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RREADY : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem_RLAST : STD_LOGIC;
    signal gmem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BREADY : STD_LOGIC;
    signal gmem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal backsub_gmem_m_axi_U_ap_dummy_ce : STD_LOGIC;
    signal gmem_offset_AWVALID : STD_LOGIC;
    signal gmem_offset_AWREADY : STD_LOGIC;
    signal gmem_offset_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_offset_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_offset_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_offset_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem_offset_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_offset_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_offset_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_offset_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem_offset_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_offset_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_offset_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_offset_WVALID : STD_LOGIC;
    signal gmem_offset_WREADY : STD_LOGIC;
    signal gmem_offset_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_offset_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_offset_WLAST : STD_LOGIC;
    signal gmem_offset_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_offset_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_offset_ARVALID : STD_LOGIC;
    signal gmem_offset_ARREADY : STD_LOGIC;
    signal gmem_offset_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_offset_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_offset_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_offset_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem_offset_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_offset_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_offset_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_offset_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem_offset_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_offset_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_offset_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_offset_RVALID : STD_LOGIC;
    signal gmem_offset_RREADY : STD_LOGIC;
    signal gmem_offset_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_offset_RLAST : STD_LOGIC;
    signal gmem_offset_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_offset_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_offset_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_offset_BVALID : STD_LOGIC;
    signal gmem_offset_BREADY : STD_LOGIC;
    signal gmem_offset_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_offset_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_offset_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal backsub_gmem_offset_m_axi_U_ap_dummy_ce : STD_LOGIC;
    signal indvar_reg_482 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_ppstg_indvar_reg_482_pp0_it1 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_9 : STD_LOGIC;
    signal ap_sig_bdd_454 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal exitcond9_reg_990 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_463 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal indvar1_reg_494 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_reg_ppstg_indvar1_reg_494_pp1_it1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_cseq_ST_pp1_stg0_fsm_18 : STD_LOGIC;
    signal ap_sig_bdd_479 : BOOLEAN;
    signal ap_reg_ppiten_pp1_it0 : STD_LOGIC := '0';
    signal exitcond3_reg_1024 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_487 : BOOLEAN;
    signal ap_reg_ppiten_pp1_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it2 : STD_LOGIC := '0';
    signal indvar2_reg_530 : STD_LOGIC_VECTOR (8 downto 0);
    signal indvar3_reg_541 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_577_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_506 : BOOLEAN;
    signal ap_sig_ioackin_gmem_offset_ARREADY : STD_LOGIC;
    signal ap_sig_cseq_ST_st45_fsm_36 : STD_LOGIC;
    signal ap_sig_bdd_517 : BOOLEAN;
    signal reg_602 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st26_fsm_21 : STD_LOGIC;
    signal ap_sig_bdd_526 : BOOLEAN;
    signal ap_sig_cseq_ST_st30_fsm_25 : STD_LOGIC;
    signal ap_sig_bdd_533 : BOOLEAN;
    signal init_read_read_fu_212_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal init_read_reg_943 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_cast_fu_617_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_10_cast_reg_947 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_30_cast_fu_621_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_30_cast_reg_952 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_31_cast_fu_625_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_31_cast_reg_957 : STD_LOGIC_VECTOR (32 downto 0);
    signal next_mul1_fu_629_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal next_mul1_reg_962 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_554 : BOOLEAN;
    signal next_mul_fu_635_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal next_mul_reg_967 : STD_LOGIC_VECTOR (16 downto 0);
    signal x_1_fu_647_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal x_1_reg_975 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_7_fu_657_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_7_reg_980 : STD_LOGIC_VECTOR (30 downto 0);
    signal exitcond2_fu_641_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_662_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_reg_985 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond9_fu_666_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond9_reg_990_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_next_fu_672_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal indvar_next_reg_994 : STD_LOGIC_VECTOR (10 downto 0);
    signal gmem_offset_addr_1_read_reg_999 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_fu_683_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_27_reg_1004 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_sig_cseq_ST_st13_fsm_10 : STD_LOGIC;
    signal ap_sig_bdd_584 : BOOLEAN;
    signal tmp_29_fu_687_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_29_reg_1009 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_30_fu_692_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_30_reg_1014 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st14_fsm_11 : STD_LOGIC;
    signal ap_sig_bdd_595 : BOOLEAN;
    signal ap_sig_ioackin_gmem_ARREADY : STD_LOGIC;
    signal grp_fu_584_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond3_fu_696_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond3_reg_1024_pp1_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_next1_fu_702_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal indvar_next1_reg_1028 : STD_LOGIC_VECTOR (8 downto 0);
    signal gmem_addr_1_read_reg_1033 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_1_fu_719_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_1_reg_1041 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_cseq_ST_st25_fsm_20 : STD_LOGIC;
    signal ap_sig_bdd_620 : BOOLEAN;
    signal tmp_24_fu_725_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_24_reg_1046 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_fu_713_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_736_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_1_reg_1059 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_11_fu_806_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_11_reg_1064 : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond1_fu_730_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_31_fu_832_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_31_reg_1072 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_23_fu_864_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_23_reg_1077 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st29_fsm_24 : STD_LOGIC;
    signal ap_sig_bdd_657 : BOOLEAN;
    signal tmp_36_fu_897_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_36_reg_1087 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st33_fsm_28 : STD_LOGIC;
    signal ap_sig_bdd_668 : BOOLEAN;
    signal ap_sig_ioackin_gmem_AWREADY : STD_LOGIC;
    signal exitcond4_fu_901_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond4_reg_1092 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp2_stg0_fsm_29 : STD_LOGIC;
    signal ap_sig_bdd_681 : BOOLEAN;
    signal ap_reg_ppiten_pp2_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it1 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond4_reg_1092_pp2_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_ioackin_gmem_WREADY : STD_LOGIC;
    signal ap_reg_ppiten_pp2_it2 : STD_LOGIC := '0';
    signal indvar_next2_fu_907_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal extLd_fu_918_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal extLd_reg_1106 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_591_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st37_fsm_30 : STD_LOGIC;
    signal ap_sig_bdd_717 : BOOLEAN;
    signal exitcond5_fu_926_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond5_reg_1116 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp3_stg0_fsm_35 : STD_LOGIC;
    signal ap_sig_bdd_726 : BOOLEAN;
    signal ap_reg_ppiten_pp3_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp3_it1 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond5_reg_1116_pp3_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_ioackin_gmem_offset_WREADY : STD_LOGIC;
    signal ap_reg_ppiten_pp3_it2 : STD_LOGIC := '0';
    signal indvar_next3_fu_932_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal parameters_load_reg_1130 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_bdd_761 : BOOLEAN;
    signal ap_sig_cseq_ST_st20_fsm_17 : STD_LOGIC;
    signal ap_sig_bdd_773 : BOOLEAN;
    signal ap_sig_cseq_ST_st41_fsm_34 : STD_LOGIC;
    signal ap_sig_bdd_788 : BOOLEAN;
    signal ap_sig_ioackin_gmem_offset_AWREADY : STD_LOGIC;
    signal grp_backsub_EM_ALGO_fu_552_ap_start : STD_LOGIC;
    signal grp_backsub_EM_ALGO_fu_552_ap_done : STD_LOGIC;
    signal grp_backsub_EM_ALGO_fu_552_ap_idle : STD_LOGIC;
    signal grp_backsub_EM_ALGO_fu_552_ap_ready : STD_LOGIC;
    signal grp_backsub_EM_ALGO_fu_552_pixel : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_backsub_EM_ALGO_fu_552_pos_r : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_backsub_EM_ALGO_fu_552_parameters_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_backsub_EM_ALGO_fu_552_parameters_ce0 : STD_LOGIC;
    signal grp_backsub_EM_ALGO_fu_552_parameters_we0 : STD_LOGIC;
    signal grp_backsub_EM_ALGO_fu_552_parameters_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_backsub_EM_ALGO_fu_552_parameters_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_backsub_EM_ALGO_fu_552_parameters_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_backsub_EM_ALGO_fu_552_parameters_ce1 : STD_LOGIC;
    signal grp_backsub_EM_ALGO_fu_552_parameters_we1 : STD_LOGIC;
    signal grp_backsub_EM_ALGO_fu_552_parameters_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_backsub_EM_ALGO_fu_552_parameters_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_backsub_EM_ALGO_fu_552_x : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_backsub_EM_ALGO_fu_552_back_gauss_address0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_backsub_EM_ALGO_fu_552_back_gauss_ce0 : STD_LOGIC;
    signal grp_backsub_EM_ALGO_fu_552_back_gauss_we0 : STD_LOGIC;
    signal grp_backsub_EM_ALGO_fu_552_back_gauss_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_backsub_EM_ALGO_fu_552_back_gauss_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_backsub_EM_ALGO_fu_552_back_gauss_address1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_backsub_EM_ALGO_fu_552_back_gauss_ce1 : STD_LOGIC;
    signal grp_backsub_EM_ALGO_fu_552_back_gauss_we1 : STD_LOGIC;
    signal grp_backsub_EM_ALGO_fu_552_back_gauss_d1 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_backsub_EM_ALGO_fu_552_matchsum_address0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_backsub_EM_ALGO_fu_552_matchsum_ce0 : STD_LOGIC;
    signal grp_backsub_EM_ALGO_fu_552_matchsum_we0 : STD_LOGIC;
    signal grp_backsub_EM_ALGO_fu_552_matchsum_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_backsub_EM_ALGO_fu_552_matchsum_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_backsub_EM_ALGO_fu_552_ap_return : STD_LOGIC_VECTOR (0 downto 0);
    signal x_reg_447 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_cseq_ST_st49_fsm_40 : STD_LOGIC;
    signal ap_sig_bdd_841 : BOOLEAN;
    signal phi_mul_reg_459 : STD_LOGIC_VECTOR (16 downto 0);
    signal phi_mul9_reg_471 : STD_LOGIC_VECTOR (18 downto 0);
    signal indvar_phi_fu_486_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal indvar1_phi_fu_498_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_reg_506 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_cseq_ST_st28_fsm_23 : STD_LOGIC;
    signal ap_sig_bdd_870 : BOOLEAN;
    signal ap_sig_cseq_ST_st24_fsm_19 : STD_LOGIC;
    signal ap_sig_bdd_880 : BOOLEAN;
    signal i_reg_518 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_cseq_ST_st32_fsm_27 : STD_LOGIC;
    signal ap_sig_bdd_890 : BOOLEAN;
    signal grp_backsub_EM_ALGO_fu_552_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_st27_fsm_22 : STD_LOGIC;
    signal ap_sig_bdd_905 : BOOLEAN;
    signal ap_sig_cseq_ST_st31_fsm_26 : STD_LOGIC;
    signal ap_sig_bdd_912 : BOOLEAN;
    signal tmp_6_fu_678_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_708_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_32_fu_760_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_34_fu_772_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_fu_816_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_fu_827_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_16_fu_845_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_fu_859_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_20_fu_878_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_22_fu_892_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_26_fu_913_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_28_fu_938_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_gmem_offset_ARREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_gmem_offset_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_gmem_offset_WREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_gmem_ARREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_gmem_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_gmem_WREADY : STD_LOGIC := '0';
    signal tmp_4_fu_607_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_5_fu_653_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_cast8_fu_742_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_9_fu_746_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_s_fu_752_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_33_fu_766_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_shl_fu_782_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl1_fu_794_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl_cast_fu_790_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl1_cast_fu_802_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_11_cast_fu_812_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_821_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_836_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_15_cast_fu_841_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_850_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_17_cast_fu_855_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_fu_869_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_19_cast_fu_874_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_fu_883_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_21_cast_fu_888_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (40 downto 0);
    signal ap_sig_bdd_997 : BOOLEAN;
    signal ap_sig_bdd_1416 : BOOLEAN;
    signal ap_sig_bdd_994 : BOOLEAN;

    component backsub_EM_ALGO IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        pixel : IN STD_LOGIC_VECTOR (7 downto 0);
        pos_r : IN STD_LOGIC_VECTOR (8 downto 0);
        parameters_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        parameters_ce0 : OUT STD_LOGIC;
        parameters_we0 : OUT STD_LOGIC;
        parameters_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        parameters_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        parameters_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
        parameters_ce1 : OUT STD_LOGIC;
        parameters_we1 : OUT STD_LOGIC;
        parameters_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        parameters_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        x : IN STD_LOGIC_VECTOR (8 downto 0);
        back_gauss_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
        back_gauss_ce0 : OUT STD_LOGIC;
        back_gauss_we0 : OUT STD_LOGIC;
        back_gauss_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        back_gauss_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
        back_gauss_address1 : OUT STD_LOGIC_VECTOR (17 downto 0);
        back_gauss_ce1 : OUT STD_LOGIC;
        back_gauss_we1 : OUT STD_LOGIC;
        back_gauss_d1 : OUT STD_LOGIC_VECTOR (0 downto 0);
        matchsum_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
        matchsum_ce0 : OUT STD_LOGIC;
        matchsum_we0 : OUT STD_LOGIC;
        matchsum_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        matchsum_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component backsub_parameters IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component backsub_data_array IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component backsub_matchsum IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component backsub_back_gauss IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        address1 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component backsub_out_frame IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component backsub_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        frame_in : OUT STD_LOGIC_VECTOR (31 downto 0);
        frame_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        para : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component backsub_CRTL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        ap_return : IN STD_LOGIC_VECTOR (31 downto 0);
        init : OUT STD_LOGIC );
    end component;


    component backsub_gmem_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component backsub_gmem_offset_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    parameters_U : component backsub_parameters
    generic map (
        DataWidth => 32,
        AddressRange => 1800,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => parameters_address0,
        ce0 => parameters_ce0,
        we0 => parameters_we0,
        d0 => parameters_d0,
        q0 => parameters_q0,
        address1 => parameters_address1,
        ce1 => parameters_ce1,
        we1 => parameters_we1,
        d1 => parameters_d1,
        q1 => parameters_q1);

    data_array_U : component backsub_data_array
    generic map (
        DataWidth => 8,
        AddressRange => 300,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => data_array_address0,
        ce0 => data_array_ce0,
        we0 => data_array_we0,
        d0 => data_array_d0,
        q0 => data_array_q0);

    matchsum_U : component backsub_matchsum
    generic map (
        DataWidth => 8,
        AddressRange => 153600,
        AddressWidth => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => matchsum_address0,
        ce0 => matchsum_ce0,
        we0 => matchsum_we0,
        d0 => matchsum_d0,
        q0 => matchsum_q0,
        address1 => matchsum_address1,
        ce1 => matchsum_ce1,
        we1 => matchsum_we1,
        d1 => matchsum_d1);

    back_gauss_U : component backsub_back_gauss
    generic map (
        DataWidth => 1,
        AddressRange => 153600,
        AddressWidth => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => back_gauss_address0,
        ce0 => back_gauss_ce0,
        we0 => back_gauss_we0,
        d0 => back_gauss_d0,
        q0 => back_gauss_q0,
        address1 => back_gauss_address1,
        ce1 => back_gauss_ce1,
        we1 => back_gauss_we1,
        d1 => back_gauss_d1);

    out_frame_U : component backsub_out_frame
    generic map (
        DataWidth => 1,
        AddressRange => 300,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => out_frame_address0,
        ce0 => out_frame_ce0,
        we0 => out_frame_we0,
        d0 => out_frame_d0,
        q0 => out_frame_q0);

    backsub_AXILiteS_s_axi_U : component backsub_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => backsub_AXILiteS_s_axi_U_ap_dummy_ce,
        frame_in => frame_in,
        frame_out => frame_out,
        para => para);

    backsub_CRTL_BUS_s_axi_U : component backsub_CRTL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CRTL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CRTL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CRTL_BUS_AWVALID,
        AWREADY => s_axi_CRTL_BUS_AWREADY,
        AWADDR => s_axi_CRTL_BUS_AWADDR,
        WVALID => s_axi_CRTL_BUS_WVALID,
        WREADY => s_axi_CRTL_BUS_WREADY,
        WDATA => s_axi_CRTL_BUS_WDATA,
        WSTRB => s_axi_CRTL_BUS_WSTRB,
        ARVALID => s_axi_CRTL_BUS_ARVALID,
        ARREADY => s_axi_CRTL_BUS_ARREADY,
        ARADDR => s_axi_CRTL_BUS_ARADDR,
        RVALID => s_axi_CRTL_BUS_RVALID,
        RREADY => s_axi_CRTL_BUS_RREADY,
        RDATA => s_axi_CRTL_BUS_RDATA,
        RRESP => s_axi_CRTL_BUS_RRESP,
        BVALID => s_axi_CRTL_BUS_BVALID,
        BREADY => s_axi_CRTL_BUS_BREADY,
        BRESP => s_axi_CRTL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => backsub_CRTL_BUS_s_axi_U_ap_dummy_ce,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        ap_return => ap_return,
        init => init);

    backsub_gmem_m_axi_U : component backsub_gmem_m_axi
    generic map (
        USER_DW => 8,
        USER_AW => 32,
        USER_MAXREQS => 5,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => backsub_gmem_m_axi_U_ap_dummy_ce,
        I_ARVALID => gmem_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => gmem_ARADDR,
        I_ARID => gmem_ARID,
        I_ARLEN => gmem_ARLEN,
        I_ARSIZE => gmem_ARSIZE,
        I_ARLOCK => gmem_ARLOCK,
        I_ARCACHE => gmem_ARCACHE,
        I_ARQOS => gmem_ARQOS,
        I_ARPROT => gmem_ARPROT,
        I_ARUSER => gmem_ARUSER,
        I_ARBURST => gmem_ARBURST,
        I_ARREGION => gmem_ARREGION,
        I_RVALID => gmem_RVALID,
        I_RREADY => gmem_RREADY,
        I_RDATA => gmem_RDATA,
        I_RID => gmem_RID,
        I_RUSER => gmem_RUSER,
        I_RRESP => gmem_RRESP,
        I_RLAST => gmem_RLAST,
        I_AWVALID => gmem_AWVALID,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => gmem_AWADDR,
        I_AWID => gmem_AWID,
        I_AWLEN => gmem_AWLEN,
        I_AWSIZE => gmem_AWSIZE,
        I_AWLOCK => gmem_AWLOCK,
        I_AWCACHE => gmem_AWCACHE,
        I_AWQOS => gmem_AWQOS,
        I_AWPROT => gmem_AWPROT,
        I_AWUSER => gmem_AWUSER,
        I_AWBURST => gmem_AWBURST,
        I_AWREGION => gmem_AWREGION,
        I_WVALID => gmem_WVALID,
        I_WREADY => gmem_WREADY,
        I_WDATA => gmem_WDATA,
        I_WID => gmem_WID,
        I_WUSER => gmem_WUSER,
        I_WLAST => gmem_WLAST,
        I_WSTRB => gmem_WSTRB,
        I_BVALID => gmem_BVALID,
        I_BREADY => gmem_BREADY,
        I_BRESP => gmem_BRESP,
        I_BID => gmem_BID,
        I_BUSER => gmem_BUSER);

    backsub_gmem_offset_m_axi_U : component backsub_gmem_offset_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_OFFSET_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_OFFSET_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_OFFSET_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_OFFSET_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_OFFSET_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_OFFSET_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_OFFSET_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_OFFSET_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_OFFSET_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_OFFSET_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_OFFSET_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem_offset_AWVALID,
        AWREADY => m_axi_gmem_offset_AWREADY,
        AWADDR => m_axi_gmem_offset_AWADDR,
        AWID => m_axi_gmem_offset_AWID,
        AWLEN => m_axi_gmem_offset_AWLEN,
        AWSIZE => m_axi_gmem_offset_AWSIZE,
        AWBURST => m_axi_gmem_offset_AWBURST,
        AWLOCK => m_axi_gmem_offset_AWLOCK,
        AWCACHE => m_axi_gmem_offset_AWCACHE,
        AWPROT => m_axi_gmem_offset_AWPROT,
        AWQOS => m_axi_gmem_offset_AWQOS,
        AWREGION => m_axi_gmem_offset_AWREGION,
        AWUSER => m_axi_gmem_offset_AWUSER,
        WVALID => m_axi_gmem_offset_WVALID,
        WREADY => m_axi_gmem_offset_WREADY,
        WDATA => m_axi_gmem_offset_WDATA,
        WSTRB => m_axi_gmem_offset_WSTRB,
        WLAST => m_axi_gmem_offset_WLAST,
        WID => m_axi_gmem_offset_WID,
        WUSER => m_axi_gmem_offset_WUSER,
        ARVALID => m_axi_gmem_offset_ARVALID,
        ARREADY => m_axi_gmem_offset_ARREADY,
        ARADDR => m_axi_gmem_offset_ARADDR,
        ARID => m_axi_gmem_offset_ARID,
        ARLEN => m_axi_gmem_offset_ARLEN,
        ARSIZE => m_axi_gmem_offset_ARSIZE,
        ARBURST => m_axi_gmem_offset_ARBURST,
        ARLOCK => m_axi_gmem_offset_ARLOCK,
        ARCACHE => m_axi_gmem_offset_ARCACHE,
        ARPROT => m_axi_gmem_offset_ARPROT,
        ARQOS => m_axi_gmem_offset_ARQOS,
        ARREGION => m_axi_gmem_offset_ARREGION,
        ARUSER => m_axi_gmem_offset_ARUSER,
        RVALID => m_axi_gmem_offset_RVALID,
        RREADY => m_axi_gmem_offset_RREADY,
        RDATA => m_axi_gmem_offset_RDATA,
        RLAST => m_axi_gmem_offset_RLAST,
        RID => m_axi_gmem_offset_RID,
        RUSER => m_axi_gmem_offset_RUSER,
        RRESP => m_axi_gmem_offset_RRESP,
        BVALID => m_axi_gmem_offset_BVALID,
        BREADY => m_axi_gmem_offset_BREADY,
        BRESP => m_axi_gmem_offset_BRESP,
        BID => m_axi_gmem_offset_BID,
        BUSER => m_axi_gmem_offset_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => backsub_gmem_offset_m_axi_U_ap_dummy_ce,
        I_ARVALID => gmem_offset_ARVALID,
        I_ARREADY => gmem_offset_ARREADY,
        I_ARADDR => gmem_offset_ARADDR,
        I_ARID => gmem_offset_ARID,
        I_ARLEN => gmem_offset_ARLEN,
        I_ARSIZE => gmem_offset_ARSIZE,
        I_ARLOCK => gmem_offset_ARLOCK,
        I_ARCACHE => gmem_offset_ARCACHE,
        I_ARQOS => gmem_offset_ARQOS,
        I_ARPROT => gmem_offset_ARPROT,
        I_ARUSER => gmem_offset_ARUSER,
        I_ARBURST => gmem_offset_ARBURST,
        I_ARREGION => gmem_offset_ARREGION,
        I_RVALID => gmem_offset_RVALID,
        I_RREADY => gmem_offset_RREADY,
        I_RDATA => gmem_offset_RDATA,
        I_RID => gmem_offset_RID,
        I_RUSER => gmem_offset_RUSER,
        I_RRESP => gmem_offset_RRESP,
        I_RLAST => gmem_offset_RLAST,
        I_AWVALID => gmem_offset_AWVALID,
        I_AWREADY => gmem_offset_AWREADY,
        I_AWADDR => gmem_offset_AWADDR,
        I_AWID => gmem_offset_AWID,
        I_AWLEN => gmem_offset_AWLEN,
        I_AWSIZE => gmem_offset_AWSIZE,
        I_AWLOCK => gmem_offset_AWLOCK,
        I_AWCACHE => gmem_offset_AWCACHE,
        I_AWQOS => gmem_offset_AWQOS,
        I_AWPROT => gmem_offset_AWPROT,
        I_AWUSER => gmem_offset_AWUSER,
        I_AWBURST => gmem_offset_AWBURST,
        I_AWREGION => gmem_offset_AWREGION,
        I_WVALID => gmem_offset_WVALID,
        I_WREADY => gmem_offset_WREADY,
        I_WDATA => gmem_offset_WDATA,
        I_WID => gmem_offset_WID,
        I_WUSER => gmem_offset_WUSER,
        I_WLAST => gmem_offset_WLAST,
        I_WSTRB => gmem_offset_WSTRB,
        I_BVALID => gmem_offset_BVALID,
        I_BREADY => gmem_offset_BREADY,
        I_BRESP => gmem_offset_BRESP,
        I_BID => gmem_offset_BID,
        I_BUSER => gmem_offset_BUSER);

    grp_backsub_EM_ALGO_fu_552 : component backsub_EM_ALGO
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_backsub_EM_ALGO_fu_552_ap_start,
        ap_done => grp_backsub_EM_ALGO_fu_552_ap_done,
        ap_idle => grp_backsub_EM_ALGO_fu_552_ap_idle,
        ap_ready => grp_backsub_EM_ALGO_fu_552_ap_ready,
        pixel => grp_backsub_EM_ALGO_fu_552_pixel,
        pos_r => grp_backsub_EM_ALGO_fu_552_pos_r,
        parameters_address0 => grp_backsub_EM_ALGO_fu_552_parameters_address0,
        parameters_ce0 => grp_backsub_EM_ALGO_fu_552_parameters_ce0,
        parameters_we0 => grp_backsub_EM_ALGO_fu_552_parameters_we0,
        parameters_d0 => grp_backsub_EM_ALGO_fu_552_parameters_d0,
        parameters_q0 => grp_backsub_EM_ALGO_fu_552_parameters_q0,
        parameters_address1 => grp_backsub_EM_ALGO_fu_552_parameters_address1,
        parameters_ce1 => grp_backsub_EM_ALGO_fu_552_parameters_ce1,
        parameters_we1 => grp_backsub_EM_ALGO_fu_552_parameters_we1,
        parameters_d1 => grp_backsub_EM_ALGO_fu_552_parameters_d1,
        parameters_q1 => grp_backsub_EM_ALGO_fu_552_parameters_q1,
        x => grp_backsub_EM_ALGO_fu_552_x,
        back_gauss_address0 => grp_backsub_EM_ALGO_fu_552_back_gauss_address0,
        back_gauss_ce0 => grp_backsub_EM_ALGO_fu_552_back_gauss_ce0,
        back_gauss_we0 => grp_backsub_EM_ALGO_fu_552_back_gauss_we0,
        back_gauss_d0 => grp_backsub_EM_ALGO_fu_552_back_gauss_d0,
        back_gauss_q0 => grp_backsub_EM_ALGO_fu_552_back_gauss_q0,
        back_gauss_address1 => grp_backsub_EM_ALGO_fu_552_back_gauss_address1,
        back_gauss_ce1 => grp_backsub_EM_ALGO_fu_552_back_gauss_ce1,
        back_gauss_we1 => grp_backsub_EM_ALGO_fu_552_back_gauss_we1,
        back_gauss_d1 => grp_backsub_EM_ALGO_fu_552_back_gauss_d1,
        matchsum_address0 => grp_backsub_EM_ALGO_fu_552_matchsum_address0,
        matchsum_ce0 => grp_backsub_EM_ALGO_fu_552_matchsum_ce0,
        matchsum_we0 => grp_backsub_EM_ALGO_fu_552_matchsum_we0,
        matchsum_d0 => grp_backsub_EM_ALGO_fu_552_matchsum_d0,
        matchsum_q0 => grp_backsub_EM_ALGO_fu_552_matchsum_q0,
        ap_return => grp_backsub_EM_ALGO_fu_552_ap_return);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_gmem_ARREADY assign process. --
    ap_reg_ioackin_gmem_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_11)) then
                    if (not((ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY))) then 
                        ap_reg_ioackin_gmem_ARREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = gmem_ARREADY)) then 
                        ap_reg_ioackin_gmem_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_gmem_AWREADY assign process. --
    ap_reg_ioackin_gmem_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem_AWREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_28)) then
                    if (not((ap_const_logic_0 = ap_sig_ioackin_gmem_AWREADY))) then 
                        ap_reg_ioackin_gmem_AWREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = gmem_AWREADY)) then 
                        ap_reg_ioackin_gmem_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_gmem_WREADY assign process. --
    ap_reg_ioackin_gmem_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem_WREADY <= ap_const_logic_0;
            else
                if (ap_sig_bdd_997) then
                    if (not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond4_reg_1092_pp2_it1) and (ap_const_logic_0 = ap_sig_ioackin_gmem_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it2)))) then 
                        ap_reg_ioackin_gmem_WREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = gmem_WREADY)) then 
                        ap_reg_ioackin_gmem_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_gmem_offset_ARREADY assign process. --
    ap_reg_ioackin_gmem_offset_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem_offset_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                    if (not((ap_const_logic_0 = ap_sig_ioackin_gmem_offset_ARREADY))) then 
                        ap_reg_ioackin_gmem_offset_ARREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = gmem_offset_ARREADY)) then 
                        ap_reg_ioackin_gmem_offset_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_gmem_offset_AWREADY assign process. --
    ap_reg_ioackin_gmem_offset_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem_offset_AWREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st41_fsm_34)) then
                    if (not(((gmem_BVALID = ap_const_logic_0) or (ap_const_logic_0 = ap_sig_ioackin_gmem_offset_AWREADY)))) then 
                        ap_reg_ioackin_gmem_offset_AWREADY <= ap_const_logic_0;
                    elsif (ap_sig_bdd_1416) then 
                        ap_reg_ioackin_gmem_offset_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_gmem_offset_WREADY assign process. --
    ap_reg_ioackin_gmem_offset_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem_offset_WREADY <= ap_const_logic_0;
            else
                if (ap_sig_bdd_994) then
                    if (not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond5_reg_1116_pp3_it1) and (ap_const_logic_0 = ap_sig_ioackin_gmem_offset_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it2)))) then 
                        ap_reg_ioackin_gmem_offset_WREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = gmem_offset_WREADY)) then 
                        ap_reg_ioackin_gmem_offset_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_9) and not((ap_sig_bdd_463 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_lv1_0 = exitcond9_fu_666_p2)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_9) and not((ap_sig_bdd_463 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (ap_const_lv1_0 = exitcond9_fu_666_p2))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_9) and not((ap_sig_bdd_463 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_lv1_0 = exitcond9_fu_666_p2))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_463 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) then 
                    ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
                    ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it0 assign process. --
    ap_reg_ppiten_pp1_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_18) and not((ap_sig_bdd_487 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and not((ap_const_lv1_0 = exitcond3_fu_696_p2)))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_17)) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it1 assign process. --
    ap_reg_ppiten_pp1_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_18) and not((ap_sig_bdd_487 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and (ap_const_lv1_0 = exitcond3_fu_696_p2))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_1;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_17) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_18) and not((ap_sig_bdd_487 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and not((ap_const_lv1_0 = exitcond3_fu_696_p2))))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it2 assign process. --
    ap_reg_ppiten_pp1_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp1_it2 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_487 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))) then 
                    ap_reg_ppiten_pp1_it2 <= ap_reg_ppiten_pp1_it1;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_17)) then 
                    ap_reg_ppiten_pp1_it2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it0 assign process. --
    ap_reg_ppiten_pp2_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_29) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond4_reg_1092_pp2_it1) and (ap_const_logic_0 = ap_sig_ioackin_gmem_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it2))) and not((ap_const_lv1_0 = exitcond4_fu_901_p2)))) then 
                    ap_reg_ppiten_pp2_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_28) and not((ap_const_logic_0 = ap_sig_ioackin_gmem_AWREADY)))) then 
                    ap_reg_ppiten_pp2_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it1 assign process. --
    ap_reg_ppiten_pp2_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_29) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond4_reg_1092_pp2_it1) and (ap_const_logic_0 = ap_sig_ioackin_gmem_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it2))) and (ap_const_lv1_0 = exitcond4_fu_901_p2))) then 
                    ap_reg_ppiten_pp2_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_28) and not((ap_const_logic_0 = ap_sig_ioackin_gmem_AWREADY))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_29) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond4_reg_1092_pp2_it1) and (ap_const_logic_0 = ap_sig_ioackin_gmem_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it2))) and not((ap_const_lv1_0 = exitcond4_fu_901_p2))))) then 
                    ap_reg_ppiten_pp2_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it2 assign process. --
    ap_reg_ppiten_pp2_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it2 <= ap_const_logic_0;
            else
                if (not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond4_reg_1092_pp2_it1) and (ap_const_logic_0 = ap_sig_ioackin_gmem_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it2)))) then 
                    ap_reg_ppiten_pp2_it2 <= ap_reg_ppiten_pp2_it1;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_28) and not((ap_const_logic_0 = ap_sig_ioackin_gmem_AWREADY)))) then 
                    ap_reg_ppiten_pp2_it2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp3_it0 assign process. --
    ap_reg_ppiten_pp3_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp3_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_35) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond5_reg_1116_pp3_it1) and (ap_const_logic_0 = ap_sig_ioackin_gmem_offset_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it2))) and not((ap_const_lv1_0 = exitcond5_fu_926_p2)))) then 
                    ap_reg_ppiten_pp3_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st41_fsm_34) and not(((gmem_BVALID = ap_const_logic_0) or (ap_const_logic_0 = ap_sig_ioackin_gmem_offset_AWREADY))))) then 
                    ap_reg_ppiten_pp3_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp3_it1 assign process. --
    ap_reg_ppiten_pp3_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp3_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_35) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond5_reg_1116_pp3_it1) and (ap_const_logic_0 = ap_sig_ioackin_gmem_offset_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it2))) and (ap_const_lv1_0 = exitcond5_fu_926_p2))) then 
                    ap_reg_ppiten_pp3_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st41_fsm_34) and not(((gmem_BVALID = ap_const_logic_0) or (ap_const_logic_0 = ap_sig_ioackin_gmem_offset_AWREADY)))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_35) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond5_reg_1116_pp3_it1) and (ap_const_logic_0 = ap_sig_ioackin_gmem_offset_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it2))) and not((ap_const_lv1_0 = exitcond5_fu_926_p2))))) then 
                    ap_reg_ppiten_pp3_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp3_it2 assign process. --
    ap_reg_ppiten_pp3_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp3_it2 <= ap_const_logic_0;
            else
                if (not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond5_reg_1116_pp3_it1) and (ap_const_logic_0 = ap_sig_ioackin_gmem_offset_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it2)))) then 
                    ap_reg_ppiten_pp3_it2 <= ap_reg_ppiten_pp3_it1;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st41_fsm_34) and not(((gmem_BVALID = ap_const_logic_0) or (ap_const_logic_0 = ap_sig_ioackin_gmem_offset_AWREADY))))) then 
                    ap_reg_ppiten_pp3_it2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- grp_backsub_EM_ALGO_fu_552_ap_start_ap_start_reg assign process. --
    grp_backsub_EM_ALGO_fu_552_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_backsub_EM_ALGO_fu_552_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_22) or (ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_26))) then 
                    grp_backsub_EM_ALGO_fu_552_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_backsub_EM_ALGO_fu_552_ap_ready)) then 
                    grp_backsub_EM_ALGO_fu_552_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- i_reg_518 assign process. --
    i_reg_518_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((ap_const_lv1_0 = init_read_reg_943)) and (ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_19))) then 
                i_reg_518 <= ap_const_lv9_0;
            elsif ((not((ap_const_logic_0 = grp_backsub_EM_ALGO_fu_552_ap_done)) and (ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_27))) then 
                i_reg_518 <= i_1_reg_1059;
            end if; 
        end if;
    end process;

    -- indvar1_reg_494 assign process. --
    indvar1_reg_494_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_18) and (ap_const_lv1_0 = exitcond3_reg_1024) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((ap_sig_bdd_487 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))))) then 
                indvar1_reg_494 <= indvar_next1_reg_1028;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_17)) then 
                indvar1_reg_494 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    -- indvar2_reg_530 assign process. --
    indvar2_reg_530_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_29) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond4_reg_1092_pp2_it1) and (ap_const_logic_0 = ap_sig_ioackin_gmem_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it2))) and (ap_const_lv1_0 = exitcond4_fu_901_p2))) then 
                indvar2_reg_530 <= indvar_next2_fu_907_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_28) and not((ap_const_logic_0 = ap_sig_ioackin_gmem_AWREADY)))) then 
                indvar2_reg_530 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    -- indvar3_reg_541 assign process. --
    indvar3_reg_541_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st41_fsm_34) and not(((gmem_BVALID = ap_const_logic_0) or (ap_const_logic_0 = ap_sig_ioackin_gmem_offset_AWREADY))))) then 
                indvar3_reg_541 <= ap_const_lv11_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_35) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond5_reg_1116_pp3_it1) and (ap_const_logic_0 = ap_sig_ioackin_gmem_offset_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it2))) and (ap_const_lv1_0 = exitcond5_fu_926_p2))) then 
                indvar3_reg_541 <= indvar_next3_fu_932_p2;
            end if; 
        end if;
    end process;

    -- indvar_reg_482 assign process. --
    indvar_reg_482_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_9) and (exitcond9_reg_990 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_463 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
                indvar_reg_482 <= indvar_next_reg_994;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
                indvar_reg_482 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    -- j_reg_506 assign process. --
    j_reg_506_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = init_read_reg_943) and (ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_19))) then 
                j_reg_506 <= ap_const_lv9_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_23) and not((ap_const_logic_0 = grp_backsub_EM_ALGO_fu_552_ap_done)))) then 
                j_reg_506 <= j_1_reg_1041;
            end if; 
        end if;
    end process;

    -- phi_mul9_reg_471 assign process. --
    phi_mul9_reg_471_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st49_fsm_40) and not((gmem_offset_BVALID = ap_const_logic_0)))) then 
                phi_mul9_reg_471 <= next_mul1_reg_962;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                phi_mul9_reg_471 <= ap_const_lv19_0;
            end if; 
        end if;
    end process;

    -- phi_mul_reg_459 assign process. --
    phi_mul_reg_459_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st49_fsm_40) and not((gmem_offset_BVALID = ap_const_logic_0)))) then 
                phi_mul_reg_459 <= next_mul_reg_967;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                phi_mul_reg_459 <= ap_const_lv17_0;
            end if; 
        end if;
    end process;

    -- x_reg_447 assign process. --
    x_reg_447_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st49_fsm_40) and not((gmem_offset_BVALID = ap_const_logic_0)))) then 
                x_reg_447 <= x_1_reg_975;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                x_reg_447 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_18) and not((ap_sig_bdd_487 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))))) then
                ap_reg_ppstg_exitcond3_reg_1024_pp1_it1 <= exitcond3_reg_1024;
                ap_reg_ppstg_indvar1_reg_494_pp1_it1 <= indvar1_reg_494;
                exitcond3_reg_1024 <= exitcond3_fu_696_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_29) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond4_reg_1092_pp2_it1) and (ap_const_logic_0 = ap_sig_ioackin_gmem_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it2))))) then
                ap_reg_ppstg_exitcond4_reg_1092_pp2_it1 <= exitcond4_reg_1092;
                exitcond4_reg_1092 <= exitcond4_fu_901_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_35) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond5_reg_1116_pp3_it1) and (ap_const_logic_0 = ap_sig_ioackin_gmem_offset_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it2))))) then
                ap_reg_ppstg_exitcond5_reg_1116_pp3_it1 <= exitcond5_reg_1116;
                exitcond5_reg_1116 <= exitcond5_fu_926_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_9) and not((ap_sig_bdd_463 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                ap_reg_ppstg_exitcond9_reg_990_pp0_it1 <= exitcond9_reg_990;
                ap_reg_ppstg_indvar_reg_482_pp0_it1 <= indvar_reg_482;
                exitcond9_reg_990 <= exitcond9_fu_666_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_29) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond4_reg_1092_pp2_it1) and (ap_const_logic_0 = ap_sig_ioackin_gmem_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it2))) and (ap_const_lv1_0 = exitcond4_reg_1092))) then
                extLd_reg_1106 <= extLd_fu_918_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_18) and (ap_const_lv1_0 = exitcond3_reg_1024) and not((ap_sig_bdd_487 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))))) then
                gmem_addr_1_read_reg_1033 <= gmem_RDATA;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_9) and (exitcond9_reg_990 = ap_const_lv1_0) and not((ap_sig_bdd_463 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                gmem_offset_addr_1_read_reg_999 <= gmem_offset_RDATA;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_20) and not((ap_const_lv1_0 = init_read_reg_943)))) then
                i_1_reg_1059 <= i_1_fu_736_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_18) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_sig_bdd_487 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))))) then
                indvar_next1_reg_1028 <= indvar_next1_fu_702_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_9) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_463 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                indvar_next_reg_994 <= indvar_next_fu_672_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then
                init_read_reg_943 <= init_read_read_fu_212_p2;
                    tmp_10_cast_reg_947(29 downto 0) <= tmp_10_cast_fu_617_p1(29 downto 0);
                tmp_30_cast_reg_952 <= tmp_30_cast_fu_621_p1;
                tmp_31_cast_reg_957 <= tmp_31_cast_fu_625_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_20) and (ap_const_lv1_0 = init_read_reg_943))) then
                j_1_reg_1041 <= j_1_fu_719_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                next_mul1_reg_962 <= next_mul1_fu_629_p2;
                next_mul_reg_967 <= next_mul_fu_635_p2;
                x_1_reg_975 <= x_1_fu_647_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_35) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond5_reg_1116_pp3_it1) and (ap_const_logic_0 = ap_sig_ioackin_gmem_offset_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it2))) and (ap_const_lv1_0 = exitcond5_reg_1116))) then
                parameters_load_reg_1130 <= parameters_q1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_21) or (ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_25))) then
                reg_602 <= data_array_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_logic_0 = ap_sig_ioackin_gmem_offset_ARREADY)))) then
                    tmp_10_reg_985(30 downto 0) <= tmp_10_fu_662_p1(30 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_20) and not((ap_const_lv1_0 = init_read_reg_943)) and (ap_const_lv1_0 = exitcond1_fu_730_p2))) then
                    tmp_11_reg_1064(12 downto 1) <= tmp_11_fu_806_p2(12 downto 1);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_24)) then
                    tmp_23_reg_1077(8 downto 0) <= tmp_23_fu_864_p1(8 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_20) and (ap_const_lv1_0 = init_read_reg_943) and (ap_const_lv1_0 = exitcond_fu_713_p2))) then
                    tmp_24_reg_1046(8 downto 0) <= tmp_24_fu_725_p1(8 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_10)) then
                    tmp_27_reg_1004(16 downto 0) <= tmp_27_fu_683_p1(16 downto 0);
                tmp_29_reg_1009 <= tmp_29_fu_687_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_11) and not((ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)))) then
                tmp_30_reg_1014 <= tmp_30_fu_692_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_20) and (((ap_const_lv1_0 = init_read_reg_943) and not((ap_const_lv1_0 = exitcond_fu_713_p2))) or (not((ap_const_lv1_0 = init_read_reg_943)) and not((ap_const_lv1_0 = exitcond1_fu_730_p2)))))) then
                tmp_31_reg_1072 <= tmp_31_fu_832_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_28) and not((ap_const_logic_0 = ap_sig_ioackin_gmem_AWREADY)))) then
                tmp_36_reg_1087 <= tmp_36_fu_897_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond2_fu_641_p2))) then
                tmp_7_reg_980 <= tmp_7_fu_657_p2;
            end if;
        end if;
    end process;
    tmp_10_cast_reg_947(30) <= '0';
    tmp_10_reg_985(63 downto 31) <= "000000000000000000000000000000000";
    tmp_27_reg_1004(32 downto 17) <= "0000000000000000";
    tmp_24_reg_1046(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    tmp_11_reg_1064(0) <= '0';
    tmp_23_reg_1077(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, gmem_BVALID, gmem_offset_BVALID, ap_reg_ppiten_pp0_it0, ap_sig_bdd_463, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_reg_ppiten_pp1_it0, ap_sig_bdd_487, ap_reg_ppiten_pp1_it1, ap_reg_ppiten_pp1_it2, ap_sig_ioackin_gmem_offset_ARREADY, init_read_reg_943, exitcond2_fu_641_p2, exitcond9_fu_666_p2, ap_sig_ioackin_gmem_ARREADY, exitcond3_fu_696_p2, exitcond_fu_713_p2, exitcond1_fu_730_p2, ap_sig_ioackin_gmem_AWREADY, exitcond4_fu_901_p2, ap_reg_ppiten_pp2_it0, ap_reg_ppiten_pp2_it1, ap_reg_ppstg_exitcond4_reg_1092_pp2_it1, ap_sig_ioackin_gmem_WREADY, ap_reg_ppiten_pp2_it2, exitcond5_fu_926_p2, ap_reg_ppiten_pp3_it0, ap_reg_ppiten_pp3_it1, ap_reg_ppstg_exitcond5_reg_1116_pp3_it1, ap_sig_ioackin_gmem_offset_WREADY, ap_reg_ppiten_pp3_it2, ap_sig_ioackin_gmem_offset_AWREADY, grp_backsub_EM_ALGO_fu_552_ap_done)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((ap_const_lv1_0 = exitcond2_fu_641_p2))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_gmem_offset_ARREADY))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_pp0_stg0_fsm_9;
            when ap_ST_pp0_stg0_fsm_9 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not((ap_sig_bdd_463 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_463 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_lv1_0 = exitcond9_fu_666_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_9;
                elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not((ap_sig_bdd_463 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_463 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_lv1_0 = exitcond9_fu_666_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                    ap_NS_fsm <= ap_ST_st13_fsm_10;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_9;
                end if;
            when ap_ST_st13_fsm_10 => 
                ap_NS_fsm <= ap_ST_st14_fsm_11;
            when ap_ST_st14_fsm_11 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY))) then
                    ap_NS_fsm <= ap_ST_st15_fsm_12;
                else
                    ap_NS_fsm <= ap_ST_st14_fsm_11;
                end if;
            when ap_ST_st15_fsm_12 => 
                ap_NS_fsm <= ap_ST_st16_fsm_13;
            when ap_ST_st16_fsm_13 => 
                ap_NS_fsm <= ap_ST_st17_fsm_14;
            when ap_ST_st17_fsm_14 => 
                ap_NS_fsm <= ap_ST_st18_fsm_15;
            when ap_ST_st18_fsm_15 => 
                ap_NS_fsm <= ap_ST_st19_fsm_16;
            when ap_ST_st19_fsm_16 => 
                ap_NS_fsm <= ap_ST_st20_fsm_17;
            when ap_ST_st20_fsm_17 => 
                ap_NS_fsm <= ap_ST_pp1_stg0_fsm_18;
            when ap_ST_pp1_stg0_fsm_18 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it2) and not((ap_sig_bdd_487 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_sig_bdd_487 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and not((ap_const_lv1_0 = exitcond3_fu_696_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_18;
                elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp1_it2) and not((ap_sig_bdd_487 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) or ((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_sig_bdd_487 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and not((ap_const_lv1_0 = exitcond3_fu_696_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it1))))) then
                    ap_NS_fsm <= ap_ST_st24_fsm_19;
                else
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_18;
                end if;
            when ap_ST_st24_fsm_19 => 
                ap_NS_fsm <= ap_ST_st25_fsm_20;
            when ap_ST_st25_fsm_20 => 
                if ((not((ap_const_lv1_0 = init_read_reg_943)) and (ap_const_lv1_0 = exitcond1_fu_730_p2))) then
                    ap_NS_fsm <= ap_ST_st29_fsm_24;
                elsif ((((ap_const_lv1_0 = init_read_reg_943) and not((ap_const_lv1_0 = exitcond_fu_713_p2))) or (not((ap_const_lv1_0 = init_read_reg_943)) and not((ap_const_lv1_0 = exitcond1_fu_730_p2))))) then
                    ap_NS_fsm <= ap_ST_st33_fsm_28;
                else
                    ap_NS_fsm <= ap_ST_st26_fsm_21;
                end if;
            when ap_ST_st26_fsm_21 => 
                ap_NS_fsm <= ap_ST_st27_fsm_22;
            when ap_ST_st27_fsm_22 => 
                ap_NS_fsm <= ap_ST_st28_fsm_23;
            when ap_ST_st28_fsm_23 => 
                if (not((ap_const_logic_0 = grp_backsub_EM_ALGO_fu_552_ap_done))) then
                    ap_NS_fsm <= ap_ST_st25_fsm_20;
                else
                    ap_NS_fsm <= ap_ST_st28_fsm_23;
                end if;
            when ap_ST_st29_fsm_24 => 
                ap_NS_fsm <= ap_ST_st30_fsm_25;
            when ap_ST_st30_fsm_25 => 
                ap_NS_fsm <= ap_ST_st31_fsm_26;
            when ap_ST_st31_fsm_26 => 
                ap_NS_fsm <= ap_ST_st32_fsm_27;
            when ap_ST_st32_fsm_27 => 
                if (not((ap_const_logic_0 = grp_backsub_EM_ALGO_fu_552_ap_done))) then
                    ap_NS_fsm <= ap_ST_st25_fsm_20;
                else
                    ap_NS_fsm <= ap_ST_st32_fsm_27;
                end if;
            when ap_ST_st33_fsm_28 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_gmem_AWREADY))) then
                    ap_NS_fsm <= ap_ST_pp2_stg0_fsm_29;
                else
                    ap_NS_fsm <= ap_ST_st33_fsm_28;
                end if;
            when ap_ST_pp2_stg0_fsm_29 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it2) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond4_reg_1092_pp2_it1) and (ap_const_logic_0 = ap_sig_ioackin_gmem_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it2))) and not((ap_const_logic_1 = ap_reg_ppiten_pp2_it1)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond4_reg_1092_pp2_it1) and (ap_const_logic_0 = ap_sig_ioackin_gmem_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it2))) and not((ap_const_lv1_0 = exitcond4_fu_901_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp2_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp2_stg0_fsm_29;
                elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp2_it2) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond4_reg_1092_pp2_it1) and (ap_const_logic_0 = ap_sig_ioackin_gmem_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it2))) and not((ap_const_logic_1 = ap_reg_ppiten_pp2_it1))) or ((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond4_reg_1092_pp2_it1) and (ap_const_logic_0 = ap_sig_ioackin_gmem_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it2))) and not((ap_const_lv1_0 = exitcond4_fu_901_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp2_it1))))) then
                    ap_NS_fsm <= ap_ST_st37_fsm_30;
                else
                    ap_NS_fsm <= ap_ST_pp2_stg0_fsm_29;
                end if;
            when ap_ST_st37_fsm_30 => 
                ap_NS_fsm <= ap_ST_st38_fsm_31;
            when ap_ST_st38_fsm_31 => 
                ap_NS_fsm <= ap_ST_st39_fsm_32;
            when ap_ST_st39_fsm_32 => 
                ap_NS_fsm <= ap_ST_st40_fsm_33;
            when ap_ST_st40_fsm_33 => 
                ap_NS_fsm <= ap_ST_st41_fsm_34;
            when ap_ST_st41_fsm_34 => 
                if (not(((gmem_BVALID = ap_const_logic_0) or (ap_const_logic_0 = ap_sig_ioackin_gmem_offset_AWREADY)))) then
                    ap_NS_fsm <= ap_ST_pp3_stg0_fsm_35;
                else
                    ap_NS_fsm <= ap_ST_st41_fsm_34;
                end if;
            when ap_ST_pp3_stg0_fsm_35 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp3_it2) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond5_reg_1116_pp3_it1) and (ap_const_logic_0 = ap_sig_ioackin_gmem_offset_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it2))) and not((ap_const_logic_1 = ap_reg_ppiten_pp3_it1)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond5_reg_1116_pp3_it1) and (ap_const_logic_0 = ap_sig_ioackin_gmem_offset_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it2))) and not((ap_const_lv1_0 = exitcond5_fu_926_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp3_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp3_stg0_fsm_35;
                elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp3_it2) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond5_reg_1116_pp3_it1) and (ap_const_logic_0 = ap_sig_ioackin_gmem_offset_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it2))) and not((ap_const_logic_1 = ap_reg_ppiten_pp3_it1))) or ((ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond5_reg_1116_pp3_it1) and (ap_const_logic_0 = ap_sig_ioackin_gmem_offset_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it2))) and not((ap_const_lv1_0 = exitcond5_fu_926_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp3_it1))))) then
                    ap_NS_fsm <= ap_ST_st45_fsm_36;
                else
                    ap_NS_fsm <= ap_ST_pp3_stg0_fsm_35;
                end if;
            when ap_ST_st45_fsm_36 => 
                ap_NS_fsm <= ap_ST_st46_fsm_37;
            when ap_ST_st46_fsm_37 => 
                ap_NS_fsm <= ap_ST_st47_fsm_38;
            when ap_ST_st47_fsm_38 => 
                ap_NS_fsm <= ap_ST_st48_fsm_39;
            when ap_ST_st48_fsm_39 => 
                ap_NS_fsm <= ap_ST_st49_fsm_40;
            when ap_ST_st49_fsm_40 => 
                if (not((gmem_offset_BVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st49_fsm_40;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond2_fu_641_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond2_fu_641_p2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond2_fu_641_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond2_fu_641_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= ap_const_lv32_0;

    -- ap_rst_n_inv assign process. --
    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    -- ap_sig_bdd_1416 assign process. --
    ap_sig_bdd_1416_assign_proc : process(gmem_BVALID, gmem_offset_AWREADY)
    begin
                ap_sig_bdd_1416 <= ((ap_const_logic_1 = gmem_offset_AWREADY) and not((gmem_BVALID = ap_const_logic_0)));
    end process;


    -- ap_sig_bdd_454 assign process. --
    ap_sig_bdd_454_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_454 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    -- ap_sig_bdd_463 assign process. --
    ap_sig_bdd_463_assign_proc : process(gmem_offset_RVALID, exitcond9_reg_990)
    begin
                ap_sig_bdd_463 <= ((gmem_offset_RVALID = ap_const_logic_0) and (exitcond9_reg_990 = ap_const_lv1_0));
    end process;


    -- ap_sig_bdd_479 assign process. --
    ap_sig_bdd_479_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_479 <= (ap_const_lv1_1 = ap_CS_fsm(18 downto 18));
    end process;


    -- ap_sig_bdd_487 assign process. --
    ap_sig_bdd_487_assign_proc : process(gmem_RVALID, exitcond3_reg_1024)
    begin
                ap_sig_bdd_487 <= ((gmem_RVALID = ap_const_logic_0) and (ap_const_lv1_0 = exitcond3_reg_1024));
    end process;


    -- ap_sig_bdd_506 assign process. --
    ap_sig_bdd_506_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_506 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_517 assign process. --
    ap_sig_bdd_517_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_517 <= (ap_const_lv1_1 = ap_CS_fsm(36 downto 36));
    end process;


    -- ap_sig_bdd_526 assign process. --
    ap_sig_bdd_526_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_526 <= (ap_const_lv1_1 = ap_CS_fsm(21 downto 21));
    end process;


    -- ap_sig_bdd_533 assign process. --
    ap_sig_bdd_533_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_533 <= (ap_const_lv1_1 = ap_CS_fsm(25 downto 25));
    end process;


    -- ap_sig_bdd_554 assign process. --
    ap_sig_bdd_554_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_554 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_584 assign process. --
    ap_sig_bdd_584_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_584 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    -- ap_sig_bdd_59 assign process. --
    ap_sig_bdd_59_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_59 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_595 assign process. --
    ap_sig_bdd_595_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_595 <= (ap_const_lv1_1 = ap_CS_fsm(11 downto 11));
    end process;


    -- ap_sig_bdd_620 assign process. --
    ap_sig_bdd_620_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_620 <= (ap_const_lv1_1 = ap_CS_fsm(20 downto 20));
    end process;


    -- ap_sig_bdd_657 assign process. --
    ap_sig_bdd_657_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_657 <= (ap_const_lv1_1 = ap_CS_fsm(24 downto 24));
    end process;


    -- ap_sig_bdd_668 assign process. --
    ap_sig_bdd_668_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_668 <= (ap_const_lv1_1 = ap_CS_fsm(28 downto 28));
    end process;


    -- ap_sig_bdd_681 assign process. --
    ap_sig_bdd_681_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_681 <= (ap_const_lv1_1 = ap_CS_fsm(29 downto 29));
    end process;


    -- ap_sig_bdd_717 assign process. --
    ap_sig_bdd_717_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_717 <= (ap_const_lv1_1 = ap_CS_fsm(30 downto 30));
    end process;


    -- ap_sig_bdd_726 assign process. --
    ap_sig_bdd_726_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_726 <= (ap_const_lv1_1 = ap_CS_fsm(35 downto 35));
    end process;


    -- ap_sig_bdd_761 assign process. --
    ap_sig_bdd_761_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_761 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    -- ap_sig_bdd_773 assign process. --
    ap_sig_bdd_773_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_773 <= (ap_const_lv1_1 = ap_CS_fsm(17 downto 17));
    end process;


    -- ap_sig_bdd_788 assign process. --
    ap_sig_bdd_788_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_788 <= (ap_const_lv1_1 = ap_CS_fsm(34 downto 34));
    end process;


    -- ap_sig_bdd_841 assign process. --
    ap_sig_bdd_841_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_841 <= (ap_const_lv1_1 = ap_CS_fsm(40 downto 40));
    end process;


    -- ap_sig_bdd_870 assign process. --
    ap_sig_bdd_870_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_870 <= (ap_const_lv1_1 = ap_CS_fsm(23 downto 23));
    end process;


    -- ap_sig_bdd_880 assign process. --
    ap_sig_bdd_880_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_880 <= (ap_const_lv1_1 = ap_CS_fsm(19 downto 19));
    end process;


    -- ap_sig_bdd_890 assign process. --
    ap_sig_bdd_890_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_890 <= (ap_const_lv1_1 = ap_CS_fsm(27 downto 27));
    end process;


    -- ap_sig_bdd_905 assign process. --
    ap_sig_bdd_905_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_905 <= (ap_const_lv1_1 = ap_CS_fsm(22 downto 22));
    end process;


    -- ap_sig_bdd_912 assign process. --
    ap_sig_bdd_912_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_912 <= (ap_const_lv1_1 = ap_CS_fsm(26 downto 26));
    end process;


    -- ap_sig_bdd_994 assign process. --
    ap_sig_bdd_994_assign_proc : process(ap_reg_ppstg_exitcond5_reg_1116_pp3_it1, ap_reg_ppiten_pp3_it2)
    begin
                ap_sig_bdd_994 <= ((ap_const_lv1_0 = ap_reg_ppstg_exitcond5_reg_1116_pp3_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it2));
    end process;


    -- ap_sig_bdd_997 assign process. --
    ap_sig_bdd_997_assign_proc : process(ap_reg_ppstg_exitcond4_reg_1092_pp2_it1, ap_reg_ppiten_pp2_it2)
    begin
                ap_sig_bdd_997 <= ((ap_const_lv1_0 = ap_reg_ppstg_exitcond4_reg_1092_pp2_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it2));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_9 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_9_assign_proc : process(ap_sig_bdd_454)
    begin
        if (ap_sig_bdd_454) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp1_stg0_fsm_18 assign process. --
    ap_sig_cseq_ST_pp1_stg0_fsm_18_assign_proc : process(ap_sig_bdd_479)
    begin
        if (ap_sig_bdd_479) then 
            ap_sig_cseq_ST_pp1_stg0_fsm_18 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp1_stg0_fsm_18 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp2_stg0_fsm_29 assign process. --
    ap_sig_cseq_ST_pp2_stg0_fsm_29_assign_proc : process(ap_sig_bdd_681)
    begin
        if (ap_sig_bdd_681) then 
            ap_sig_cseq_ST_pp2_stg0_fsm_29 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp2_stg0_fsm_29 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp3_stg0_fsm_35 assign process. --
    ap_sig_cseq_ST_pp3_stg0_fsm_35_assign_proc : process(ap_sig_bdd_726)
    begin
        if (ap_sig_bdd_726) then 
            ap_sig_cseq_ST_pp3_stg0_fsm_35 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp3_stg0_fsm_35 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st13_fsm_10 assign process. --
    ap_sig_cseq_ST_st13_fsm_10_assign_proc : process(ap_sig_bdd_584)
    begin
        if (ap_sig_bdd_584) then 
            ap_sig_cseq_ST_st13_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st13_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st14_fsm_11 assign process. --
    ap_sig_cseq_ST_st14_fsm_11_assign_proc : process(ap_sig_bdd_595)
    begin
        if (ap_sig_bdd_595) then 
            ap_sig_cseq_ST_st14_fsm_11 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st14_fsm_11 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_59)
    begin
        if (ap_sig_bdd_59) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st20_fsm_17 assign process. --
    ap_sig_cseq_ST_st20_fsm_17_assign_proc : process(ap_sig_bdd_773)
    begin
        if (ap_sig_bdd_773) then 
            ap_sig_cseq_ST_st20_fsm_17 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st20_fsm_17 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st24_fsm_19 assign process. --
    ap_sig_cseq_ST_st24_fsm_19_assign_proc : process(ap_sig_bdd_880)
    begin
        if (ap_sig_bdd_880) then 
            ap_sig_cseq_ST_st24_fsm_19 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st24_fsm_19 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st25_fsm_20 assign process. --
    ap_sig_cseq_ST_st25_fsm_20_assign_proc : process(ap_sig_bdd_620)
    begin
        if (ap_sig_bdd_620) then 
            ap_sig_cseq_ST_st25_fsm_20 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st25_fsm_20 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st26_fsm_21 assign process. --
    ap_sig_cseq_ST_st26_fsm_21_assign_proc : process(ap_sig_bdd_526)
    begin
        if (ap_sig_bdd_526) then 
            ap_sig_cseq_ST_st26_fsm_21 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st26_fsm_21 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st27_fsm_22 assign process. --
    ap_sig_cseq_ST_st27_fsm_22_assign_proc : process(ap_sig_bdd_905)
    begin
        if (ap_sig_bdd_905) then 
            ap_sig_cseq_ST_st27_fsm_22 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st27_fsm_22 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st28_fsm_23 assign process. --
    ap_sig_cseq_ST_st28_fsm_23_assign_proc : process(ap_sig_bdd_870)
    begin
        if (ap_sig_bdd_870) then 
            ap_sig_cseq_ST_st28_fsm_23 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st28_fsm_23 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st29_fsm_24 assign process. --
    ap_sig_cseq_ST_st29_fsm_24_assign_proc : process(ap_sig_bdd_657)
    begin
        if (ap_sig_bdd_657) then 
            ap_sig_cseq_ST_st29_fsm_24 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st29_fsm_24 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_554)
    begin
        if (ap_sig_bdd_554) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st30_fsm_25 assign process. --
    ap_sig_cseq_ST_st30_fsm_25_assign_proc : process(ap_sig_bdd_533)
    begin
        if (ap_sig_bdd_533) then 
            ap_sig_cseq_ST_st30_fsm_25 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st30_fsm_25 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st31_fsm_26 assign process. --
    ap_sig_cseq_ST_st31_fsm_26_assign_proc : process(ap_sig_bdd_912)
    begin
        if (ap_sig_bdd_912) then 
            ap_sig_cseq_ST_st31_fsm_26 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st31_fsm_26 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st32_fsm_27 assign process. --
    ap_sig_cseq_ST_st32_fsm_27_assign_proc : process(ap_sig_bdd_890)
    begin
        if (ap_sig_bdd_890) then 
            ap_sig_cseq_ST_st32_fsm_27 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st32_fsm_27 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st33_fsm_28 assign process. --
    ap_sig_cseq_ST_st33_fsm_28_assign_proc : process(ap_sig_bdd_668)
    begin
        if (ap_sig_bdd_668) then 
            ap_sig_cseq_ST_st33_fsm_28 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st33_fsm_28 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st37_fsm_30 assign process. --
    ap_sig_cseq_ST_st37_fsm_30_assign_proc : process(ap_sig_bdd_717)
    begin
        if (ap_sig_bdd_717) then 
            ap_sig_cseq_ST_st37_fsm_30 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st37_fsm_30 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_506)
    begin
        if (ap_sig_bdd_506) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st41_fsm_34 assign process. --
    ap_sig_cseq_ST_st41_fsm_34_assign_proc : process(ap_sig_bdd_788)
    begin
        if (ap_sig_bdd_788) then 
            ap_sig_cseq_ST_st41_fsm_34 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st41_fsm_34 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st45_fsm_36 assign process. --
    ap_sig_cseq_ST_st45_fsm_36_assign_proc : process(ap_sig_bdd_517)
    begin
        if (ap_sig_bdd_517) then 
            ap_sig_cseq_ST_st45_fsm_36 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st45_fsm_36 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st49_fsm_40 assign process. --
    ap_sig_cseq_ST_st49_fsm_40_assign_proc : process(ap_sig_bdd_841)
    begin
        if (ap_sig_bdd_841) then 
            ap_sig_cseq_ST_st49_fsm_40 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st49_fsm_40 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st9_fsm_8 assign process. --
    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_bdd_761)
    begin
        if (ap_sig_bdd_761) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_ioackin_gmem_ARREADY assign process. --
    ap_sig_ioackin_gmem_ARREADY_assign_proc : process(gmem_ARREADY, ap_reg_ioackin_gmem_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_gmem_ARREADY)) then 
            ap_sig_ioackin_gmem_ARREADY <= gmem_ARREADY;
        else 
            ap_sig_ioackin_gmem_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ioackin_gmem_AWREADY assign process. --
    ap_sig_ioackin_gmem_AWREADY_assign_proc : process(gmem_AWREADY, ap_reg_ioackin_gmem_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_gmem_AWREADY)) then 
            ap_sig_ioackin_gmem_AWREADY <= gmem_AWREADY;
        else 
            ap_sig_ioackin_gmem_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ioackin_gmem_WREADY assign process. --
    ap_sig_ioackin_gmem_WREADY_assign_proc : process(gmem_WREADY, ap_reg_ioackin_gmem_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_gmem_WREADY)) then 
            ap_sig_ioackin_gmem_WREADY <= gmem_WREADY;
        else 
            ap_sig_ioackin_gmem_WREADY <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ioackin_gmem_offset_ARREADY assign process. --
    ap_sig_ioackin_gmem_offset_ARREADY_assign_proc : process(gmem_offset_ARREADY, ap_reg_ioackin_gmem_offset_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_gmem_offset_ARREADY)) then 
            ap_sig_ioackin_gmem_offset_ARREADY <= gmem_offset_ARREADY;
        else 
            ap_sig_ioackin_gmem_offset_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ioackin_gmem_offset_AWREADY assign process. --
    ap_sig_ioackin_gmem_offset_AWREADY_assign_proc : process(gmem_offset_AWREADY, ap_reg_ioackin_gmem_offset_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_gmem_offset_AWREADY)) then 
            ap_sig_ioackin_gmem_offset_AWREADY <= gmem_offset_AWREADY;
        else 
            ap_sig_ioackin_gmem_offset_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ioackin_gmem_offset_WREADY assign process. --
    ap_sig_ioackin_gmem_offset_WREADY_assign_proc : process(gmem_offset_WREADY, ap_reg_ioackin_gmem_offset_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_gmem_offset_WREADY)) then 
            ap_sig_ioackin_gmem_offset_WREADY <= gmem_offset_WREADY;
        else 
            ap_sig_ioackin_gmem_offset_WREADY <= ap_const_logic_1;
        end if; 
    end process;


    -- back_gauss_address0 assign process. --
    back_gauss_address0_assign_proc : process(ap_sig_cseq_ST_st25_fsm_20, grp_backsub_EM_ALGO_fu_552_back_gauss_address0, ap_sig_cseq_ST_st28_fsm_23, ap_sig_cseq_ST_st32_fsm_27, tmp_32_fu_760_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_20)) then 
            back_gauss_address0 <= tmp_32_fu_760_p1(18 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_23) or (ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_27))) then 
            back_gauss_address0 <= grp_backsub_EM_ALGO_fu_552_back_gauss_address0;
        else 
            back_gauss_address0 <= "XXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- back_gauss_address1 assign process. --
    back_gauss_address1_assign_proc : process(ap_sig_cseq_ST_st25_fsm_20, grp_backsub_EM_ALGO_fu_552_back_gauss_address1, ap_sig_cseq_ST_st28_fsm_23, ap_sig_cseq_ST_st32_fsm_27, tmp_34_fu_772_p3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_20)) then 
            back_gauss_address1 <= tmp_34_fu_772_p3(18 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_23) or (ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_27))) then 
            back_gauss_address1 <= grp_backsub_EM_ALGO_fu_552_back_gauss_address1;
        else 
            back_gauss_address1 <= "XXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- back_gauss_ce0 assign process. --
    back_gauss_ce0_assign_proc : process(ap_sig_cseq_ST_st25_fsm_20, grp_backsub_EM_ALGO_fu_552_back_gauss_ce0, ap_sig_cseq_ST_st28_fsm_23, ap_sig_cseq_ST_st32_fsm_27)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_20)) then 
            back_gauss_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_23) or (ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_27))) then 
            back_gauss_ce0 <= grp_backsub_EM_ALGO_fu_552_back_gauss_ce0;
        else 
            back_gauss_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- back_gauss_ce1 assign process. --
    back_gauss_ce1_assign_proc : process(ap_sig_cseq_ST_st25_fsm_20, grp_backsub_EM_ALGO_fu_552_back_gauss_ce1, ap_sig_cseq_ST_st28_fsm_23, ap_sig_cseq_ST_st32_fsm_27)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_20)) then 
            back_gauss_ce1 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_23) or (ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_27))) then 
            back_gauss_ce1 <= grp_backsub_EM_ALGO_fu_552_back_gauss_ce1;
        else 
            back_gauss_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    -- back_gauss_d0 assign process. --
    back_gauss_d0_assign_proc : process(ap_sig_cseq_ST_st25_fsm_20, grp_backsub_EM_ALGO_fu_552_back_gauss_d0, ap_sig_cseq_ST_st28_fsm_23, ap_sig_cseq_ST_st32_fsm_27)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_20)) then 
            back_gauss_d0 <= ap_const_lv1_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_23) or (ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_27))) then 
            back_gauss_d0 <= grp_backsub_EM_ALGO_fu_552_back_gauss_d0;
        else 
            back_gauss_d0 <= "X";
        end if; 
    end process;


    -- back_gauss_d1 assign process. --
    back_gauss_d1_assign_proc : process(ap_sig_cseq_ST_st25_fsm_20, grp_backsub_EM_ALGO_fu_552_back_gauss_d1, ap_sig_cseq_ST_st28_fsm_23, ap_sig_cseq_ST_st32_fsm_27)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_20)) then 
            back_gauss_d1 <= ap_const_lv1_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_23) or (ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_27))) then 
            back_gauss_d1 <= grp_backsub_EM_ALGO_fu_552_back_gauss_d1;
        else 
            back_gauss_d1 <= "X";
        end if; 
    end process;


    -- back_gauss_we0 assign process. --
    back_gauss_we0_assign_proc : process(init_read_reg_943, ap_sig_cseq_ST_st25_fsm_20, exitcond1_fu_730_p2, grp_backsub_EM_ALGO_fu_552_back_gauss_we0, ap_sig_cseq_ST_st28_fsm_23, ap_sig_cseq_ST_st32_fsm_27)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_20) and not((ap_const_lv1_0 = init_read_reg_943)) and (ap_const_lv1_0 = exitcond1_fu_730_p2)))) then 
            back_gauss_we0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_23) or (ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_27))) then 
            back_gauss_we0 <= grp_backsub_EM_ALGO_fu_552_back_gauss_we0;
        else 
            back_gauss_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- back_gauss_we1 assign process. --
    back_gauss_we1_assign_proc : process(init_read_reg_943, ap_sig_cseq_ST_st25_fsm_20, exitcond1_fu_730_p2, grp_backsub_EM_ALGO_fu_552_back_gauss_we1, ap_sig_cseq_ST_st28_fsm_23, ap_sig_cseq_ST_st32_fsm_27)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_20) and not((ap_const_lv1_0 = init_read_reg_943)) and (ap_const_lv1_0 = exitcond1_fu_730_p2)))) then 
            back_gauss_we1 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_23) or (ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_27))) then 
            back_gauss_we1 <= grp_backsub_EM_ALGO_fu_552_back_gauss_we1;
        else 
            back_gauss_we1 <= ap_const_logic_0;
        end if; 
    end process;

    backsub_AXILiteS_s_axi_U_ap_dummy_ce <= ap_const_logic_1;
    backsub_CRTL_BUS_s_axi_U_ap_dummy_ce <= ap_const_logic_1;
    backsub_gmem_m_axi_U_ap_dummy_ce <= ap_const_logic_1;
    backsub_gmem_offset_m_axi_U_ap_dummy_ce <= ap_const_logic_1;

    -- data_array_address0 assign process. --
    data_array_address0_assign_proc : process(ap_reg_ppiten_pp1_it2, ap_sig_cseq_ST_st25_fsm_20, tmp_24_fu_725_p1, tmp_23_fu_864_p1, ap_sig_cseq_ST_st29_fsm_24, tmp_8_fu_708_p1)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp1_it2)) then 
            data_array_address0 <= tmp_8_fu_708_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_24)) then 
            data_array_address0 <= tmp_23_fu_864_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_20)) then 
            data_array_address0 <= tmp_24_fu_725_p1(9 - 1 downto 0);
        else 
            data_array_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    -- data_array_ce0 assign process. --
    data_array_ce0_assign_proc : process(ap_sig_bdd_487, ap_reg_ppiten_pp1_it1, ap_reg_ppiten_pp1_it2, ap_sig_cseq_ST_st25_fsm_20, ap_sig_cseq_ST_st29_fsm_24)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_20) or (ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_24) or ((ap_const_logic_1 = ap_reg_ppiten_pp1_it2) and not((ap_sig_bdd_487 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then 
            data_array_ce0 <= ap_const_logic_1;
        else 
            data_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_array_d0 <= gmem_addr_1_read_reg_1033;

    -- data_array_we0 assign process. --
    data_array_we0_assign_proc : process(ap_sig_bdd_487, ap_reg_ppiten_pp1_it1, ap_reg_ppiten_pp1_it2, ap_reg_ppstg_exitcond3_reg_1024_pp1_it1)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp1_it2) and not((ap_sig_bdd_487 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond3_reg_1024_pp1_it1)))) then 
            data_array_we0 <= ap_const_logic_1;
        else 
            data_array_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_730_p2 <= "1" when (i_reg_518 = ap_const_lv9_12C) else "0";
    exitcond2_fu_641_p2 <= "1" when (x_reg_447 = ap_const_lv9_100) else "0";
    exitcond3_fu_696_p2 <= "1" when (indvar1_phi_fu_498_p4 = ap_const_lv9_12C) else "0";
    exitcond4_fu_901_p2 <= "1" when (indvar2_reg_530 = ap_const_lv9_12C) else "0";
    exitcond5_fu_926_p2 <= "1" when (indvar3_reg_541 = ap_const_lv11_708) else "0";
    exitcond9_fu_666_p2 <= "1" when (indvar_phi_fu_486_p4 = ap_const_lv11_708) else "0";
    exitcond_fu_713_p2 <= "1" when (j_reg_506 = ap_const_lv9_12C) else "0";
    extLd_fu_918_p3 <= 
        ap_const_lv8_FF when (out_frame_q0(0) = '1') else 
        ap_const_lv8_0;
    gmem_ARADDR <= grp_fu_584_p2;
    gmem_ARBURST <= ap_const_lv2_0;
    gmem_ARCACHE <= ap_const_lv4_0;
    gmem_ARID <= ap_const_lv1_0;
    gmem_ARLEN <= ap_const_lv32_12C;
    gmem_ARLOCK <= ap_const_lv2_0;
    gmem_ARPROT <= ap_const_lv3_0;
    gmem_ARQOS <= ap_const_lv4_0;
    gmem_ARREGION <= ap_const_lv4_0;
    gmem_ARSIZE <= ap_const_lv3_0;
    gmem_ARUSER <= ap_const_lv1_0;

    -- gmem_ARVALID assign process. --
    gmem_ARVALID_assign_proc : process(ap_sig_cseq_ST_st14_fsm_11, ap_reg_ioackin_gmem_ARREADY)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_11) and (ap_const_logic_0 = ap_reg_ioackin_gmem_ARREADY))) then 
            gmem_ARVALID <= ap_const_logic_1;
        else 
            gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    gmem_AWADDR <= grp_fu_591_p2;
    gmem_AWBURST <= ap_const_lv2_0;
    gmem_AWCACHE <= ap_const_lv4_0;
    gmem_AWID <= ap_const_lv1_0;
    gmem_AWLEN <= ap_const_lv32_12C;
    gmem_AWLOCK <= ap_const_lv2_0;
    gmem_AWPROT <= ap_const_lv3_0;
    gmem_AWQOS <= ap_const_lv4_0;
    gmem_AWREGION <= ap_const_lv4_0;
    gmem_AWSIZE <= ap_const_lv3_0;
    gmem_AWUSER <= ap_const_lv1_0;

    -- gmem_AWVALID assign process. --
    gmem_AWVALID_assign_proc : process(ap_sig_cseq_ST_st33_fsm_28, ap_reg_ioackin_gmem_AWREADY)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_28) and (ap_const_logic_0 = ap_reg_ioackin_gmem_AWREADY))) then 
            gmem_AWVALID <= ap_const_logic_1;
        else 
            gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    -- gmem_BREADY assign process. --
    gmem_BREADY_assign_proc : process(gmem_BVALID, ap_sig_cseq_ST_st41_fsm_34, ap_sig_ioackin_gmem_offset_AWREADY)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st41_fsm_34) and not(((gmem_BVALID = ap_const_logic_0) or (ap_const_logic_0 = ap_sig_ioackin_gmem_offset_AWREADY))))) then 
            gmem_BREADY <= ap_const_logic_1;
        else 
            gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    -- gmem_RREADY assign process. --
    gmem_RREADY_assign_proc : process(ap_sig_cseq_ST_pp1_stg0_fsm_18, exitcond3_reg_1024, ap_sig_bdd_487, ap_reg_ppiten_pp1_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_18) and (ap_const_lv1_0 = exitcond3_reg_1024) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((ap_sig_bdd_487 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))))) then 
            gmem_RREADY <= ap_const_logic_1;
        else 
            gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    gmem_WDATA <= extLd_reg_1106;
    gmem_WID <= ap_const_lv1_0;
    gmem_WLAST <= ap_const_logic_0;
    gmem_WSTRB <= ap_const_lv1_1;
    gmem_WUSER <= ap_const_lv1_0;

    -- gmem_WVALID assign process. --
    gmem_WVALID_assign_proc : process(ap_reg_ppstg_exitcond4_reg_1092_pp2_it1, ap_reg_ppiten_pp2_it2, ap_reg_ioackin_gmem_WREADY)
    begin
        if (((ap_const_lv1_0 = ap_reg_ppstg_exitcond4_reg_1092_pp2_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it2) and (ap_const_logic_0 = ap_reg_ioackin_gmem_WREADY))) then 
            gmem_WVALID <= ap_const_logic_1;
        else 
            gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    gmem_offset_ARADDR <= grp_fu_577_p2;
    gmem_offset_ARBURST <= ap_const_lv2_0;
    gmem_offset_ARCACHE <= ap_const_lv4_0;
    gmem_offset_ARID <= ap_const_lv1_0;
    gmem_offset_ARLEN <= ap_const_lv32_708;
    gmem_offset_ARLOCK <= ap_const_lv2_0;
    gmem_offset_ARPROT <= ap_const_lv3_0;
    gmem_offset_ARQOS <= ap_const_lv4_0;
    gmem_offset_ARREGION <= ap_const_lv4_0;
    gmem_offset_ARSIZE <= ap_const_lv3_0;
    gmem_offset_ARUSER <= ap_const_lv1_0;

    -- gmem_offset_ARVALID assign process. --
    gmem_offset_ARVALID_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_reg_ioackin_gmem_offset_ARREADY)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_logic_0 = ap_reg_ioackin_gmem_offset_ARREADY))) then 
            gmem_offset_ARVALID <= ap_const_logic_1;
        else 
            gmem_offset_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    gmem_offset_AWADDR <= grp_fu_577_p2;
    gmem_offset_AWBURST <= ap_const_lv2_0;
    gmem_offset_AWCACHE <= ap_const_lv4_0;
    gmem_offset_AWID <= ap_const_lv1_0;
    gmem_offset_AWLEN <= ap_const_lv32_708;
    gmem_offset_AWLOCK <= ap_const_lv2_0;
    gmem_offset_AWPROT <= ap_const_lv3_0;
    gmem_offset_AWQOS <= ap_const_lv4_0;
    gmem_offset_AWREGION <= ap_const_lv4_0;
    gmem_offset_AWSIZE <= ap_const_lv3_0;
    gmem_offset_AWUSER <= ap_const_lv1_0;

    -- gmem_offset_AWVALID assign process. --
    gmem_offset_AWVALID_assign_proc : process(gmem_BVALID, ap_sig_cseq_ST_st41_fsm_34, ap_reg_ioackin_gmem_offset_AWREADY)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st41_fsm_34) and not((gmem_BVALID = ap_const_logic_0)) and (ap_const_logic_0 = ap_reg_ioackin_gmem_offset_AWREADY))) then 
            gmem_offset_AWVALID <= ap_const_logic_1;
        else 
            gmem_offset_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    -- gmem_offset_BREADY assign process. --
    gmem_offset_BREADY_assign_proc : process(gmem_offset_BVALID, ap_sig_cseq_ST_st49_fsm_40)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st49_fsm_40) and not((gmem_offset_BVALID = ap_const_logic_0)))) then 
            gmem_offset_BREADY <= ap_const_logic_1;
        else 
            gmem_offset_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    -- gmem_offset_RREADY assign process. --
    gmem_offset_RREADY_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_9, exitcond9_reg_990, ap_sig_bdd_463, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_9) and (exitcond9_reg_990 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_463 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
            gmem_offset_RREADY <= ap_const_logic_1;
        else 
            gmem_offset_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    gmem_offset_WDATA <= parameters_load_reg_1130;
    gmem_offset_WID <= ap_const_lv1_0;
    gmem_offset_WLAST <= ap_const_logic_0;
    gmem_offset_WSTRB <= ap_const_lv4_F;
    gmem_offset_WUSER <= ap_const_lv1_0;

    -- gmem_offset_WVALID assign process. --
    gmem_offset_WVALID_assign_proc : process(ap_reg_ppstg_exitcond5_reg_1116_pp3_it1, ap_reg_ppiten_pp3_it2, ap_reg_ioackin_gmem_offset_WREADY)
    begin
        if (((ap_const_lv1_0 = ap_reg_ppstg_exitcond5_reg_1116_pp3_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it2) and (ap_const_logic_0 = ap_reg_ioackin_gmem_offset_WREADY))) then 
            gmem_offset_WVALID <= ap_const_logic_1;
        else 
            gmem_offset_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    grp_backsub_EM_ALGO_fu_552_ap_start <= grp_backsub_EM_ALGO_fu_552_ap_start_ap_start_reg;
    grp_backsub_EM_ALGO_fu_552_back_gauss_q0 <= back_gauss_q0;
    grp_backsub_EM_ALGO_fu_552_matchsum_q0 <= matchsum_q0;
    grp_backsub_EM_ALGO_fu_552_parameters_q0 <= parameters_q0;
    grp_backsub_EM_ALGO_fu_552_parameters_q1 <= parameters_q1;
    grp_backsub_EM_ALGO_fu_552_pixel <= reg_602;

    -- grp_backsub_EM_ALGO_fu_552_pos_r assign process. --
    grp_backsub_EM_ALGO_fu_552_pos_r_assign_proc : process(j_reg_506, ap_sig_cseq_ST_st28_fsm_23, i_reg_518, ap_sig_cseq_ST_st32_fsm_27)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_27)) then 
            grp_backsub_EM_ALGO_fu_552_pos_r <= i_reg_518;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_23)) then 
            grp_backsub_EM_ALGO_fu_552_pos_r <= j_reg_506;
        else 
            grp_backsub_EM_ALGO_fu_552_pos_r <= "XXXXXXXXX";
        end if; 
    end process;

    grp_backsub_EM_ALGO_fu_552_x <= x_reg_447;

    -- grp_fu_577_p2 assign process. --
    grp_fu_577_p2_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_9, exitcond9_reg_990, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st45_fsm_36, tmp_10_fu_662_p1, tmp_10_reg_985, ap_reg_ppstg_exitcond5_reg_1116_pp3_it1, ap_reg_ppiten_pp3_it2, ap_sig_cseq_ST_st41_fsm_34)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st45_fsm_36) or (ap_const_logic_1 = ap_sig_cseq_ST_st41_fsm_34) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_9) and (exitcond9_reg_990 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond5_reg_1116_pp3_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it2)))) then 
            grp_fu_577_p2 <= tmp_10_reg_985(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            grp_fu_577_p2 <= tmp_10_fu_662_p1(32 - 1 downto 0);
        else 
            grp_fu_577_p2 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_584_p2 assign process. --
    grp_fu_584_p2_assign_proc : process(ap_sig_cseq_ST_pp1_stg0_fsm_18, exitcond3_reg_1024, ap_reg_ppiten_pp1_it1, tmp_30_fu_692_p1, tmp_30_reg_1014, ap_sig_cseq_ST_st14_fsm_11)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_18) and (ap_const_lv1_0 = exitcond3_reg_1024) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) then 
            grp_fu_584_p2 <= tmp_30_reg_1014(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_11)) then 
            grp_fu_584_p2 <= tmp_30_fu_692_p1(32 - 1 downto 0);
        else 
            grp_fu_584_p2 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_591_p2 assign process. --
    grp_fu_591_p2_assign_proc : process(tmp_36_fu_897_p1, tmp_36_reg_1087, ap_sig_cseq_ST_st33_fsm_28, ap_reg_ppstg_exitcond4_reg_1092_pp2_it1, ap_reg_ppiten_pp2_it2, ap_sig_cseq_ST_st37_fsm_30)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st37_fsm_30) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond4_reg_1092_pp2_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it2)))) then 
            grp_fu_591_p2 <= tmp_36_reg_1087(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_28)) then 
            grp_fu_591_p2 <= tmp_36_fu_897_p1(32 - 1 downto 0);
        else 
            grp_fu_591_p2 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_1_fu_736_p2 <= std_logic_vector(unsigned(i_reg_518) + unsigned(ap_const_lv9_1));
    i_cast8_fu_742_p1 <= std_logic_vector(resize(unsigned(i_reg_518),17));

    -- indvar1_phi_fu_498_p4 assign process. --
    indvar1_phi_fu_498_p4_assign_proc : process(indvar1_reg_494, ap_sig_cseq_ST_pp1_stg0_fsm_18, exitcond3_reg_1024, ap_reg_ppiten_pp1_it1, indvar_next1_reg_1028)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_18) and (ap_const_lv1_0 = exitcond3_reg_1024) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) then 
            indvar1_phi_fu_498_p4 <= indvar_next1_reg_1028;
        else 
            indvar1_phi_fu_498_p4 <= indvar1_reg_494;
        end if; 
    end process;

    indvar_next1_fu_702_p2 <= std_logic_vector(unsigned(indvar1_phi_fu_498_p4) + unsigned(ap_const_lv9_1));
    indvar_next2_fu_907_p2 <= std_logic_vector(unsigned(indvar2_reg_530) + unsigned(ap_const_lv9_1));
    indvar_next3_fu_932_p2 <= std_logic_vector(unsigned(indvar3_reg_541) + unsigned(ap_const_lv11_1));
    indvar_next_fu_672_p2 <= std_logic_vector(unsigned(indvar_phi_fu_486_p4) + unsigned(ap_const_lv11_1));

    -- indvar_phi_fu_486_p4 assign process. --
    indvar_phi_fu_486_p4_assign_proc : process(indvar_reg_482, ap_sig_cseq_ST_pp0_stg0_fsm_9, exitcond9_reg_990, ap_reg_ppiten_pp0_it1, indvar_next_reg_994)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_9) and (exitcond9_reg_990 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            indvar_phi_fu_486_p4 <= indvar_next_reg_994;
        else 
            indvar_phi_fu_486_p4 <= indvar_reg_482;
        end if; 
    end process;

    init_read_read_fu_212_p2 <= (0=>init, others=>'-');
    j_1_fu_719_p2 <= std_logic_vector(unsigned(j_reg_506) + unsigned(ap_const_lv9_1));

    -- matchsum_address0 assign process. --
    matchsum_address0_assign_proc : process(ap_sig_cseq_ST_st25_fsm_20, grp_backsub_EM_ALGO_fu_552_matchsum_address0, ap_sig_cseq_ST_st28_fsm_23, ap_sig_cseq_ST_st32_fsm_27, tmp_32_fu_760_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_20)) then 
            matchsum_address0 <= tmp_32_fu_760_p1(18 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_23) or (ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_27))) then 
            matchsum_address0 <= grp_backsub_EM_ALGO_fu_552_matchsum_address0;
        else 
            matchsum_address0 <= "XXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    matchsum_address1 <= tmp_34_fu_772_p3(18 - 1 downto 0);

    -- matchsum_ce0 assign process. --
    matchsum_ce0_assign_proc : process(ap_sig_cseq_ST_st25_fsm_20, grp_backsub_EM_ALGO_fu_552_matchsum_ce0, ap_sig_cseq_ST_st28_fsm_23, ap_sig_cseq_ST_st32_fsm_27)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_20)) then 
            matchsum_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_23) or (ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_27))) then 
            matchsum_ce0 <= grp_backsub_EM_ALGO_fu_552_matchsum_ce0;
        else 
            matchsum_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- matchsum_ce1 assign process. --
    matchsum_ce1_assign_proc : process(ap_sig_cseq_ST_st25_fsm_20)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_20)) then 
            matchsum_ce1 <= ap_const_logic_1;
        else 
            matchsum_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    -- matchsum_d0 assign process. --
    matchsum_d0_assign_proc : process(ap_sig_cseq_ST_st25_fsm_20, grp_backsub_EM_ALGO_fu_552_matchsum_d0, ap_sig_cseq_ST_st28_fsm_23, ap_sig_cseq_ST_st32_fsm_27)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_20)) then 
            matchsum_d0 <= ap_const_lv8_0;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_23) or (ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_27))) then 
            matchsum_d0 <= grp_backsub_EM_ALGO_fu_552_matchsum_d0;
        else 
            matchsum_d0 <= "XXXXXXXX";
        end if; 
    end process;

    matchsum_d1 <= ap_const_lv8_0;

    -- matchsum_we0 assign process. --
    matchsum_we0_assign_proc : process(init_read_reg_943, ap_sig_cseq_ST_st25_fsm_20, exitcond1_fu_730_p2, grp_backsub_EM_ALGO_fu_552_matchsum_we0, ap_sig_cseq_ST_st28_fsm_23, ap_sig_cseq_ST_st32_fsm_27)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_20) and not((ap_const_lv1_0 = init_read_reg_943)) and (ap_const_lv1_0 = exitcond1_fu_730_p2)))) then 
            matchsum_we0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_23) or (ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_27))) then 
            matchsum_we0 <= grp_backsub_EM_ALGO_fu_552_matchsum_we0;
        else 
            matchsum_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- matchsum_we1 assign process. --
    matchsum_we1_assign_proc : process(init_read_reg_943, ap_sig_cseq_ST_st25_fsm_20, exitcond1_fu_730_p2)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_20) and not((ap_const_lv1_0 = init_read_reg_943)) and (ap_const_lv1_0 = exitcond1_fu_730_p2)))) then 
            matchsum_we1 <= ap_const_logic_1;
        else 
            matchsum_we1 <= ap_const_logic_0;
        end if; 
    end process;

    next_mul1_fu_629_p2 <= std_logic_vector(unsigned(phi_mul9_reg_471) + unsigned(ap_const_lv19_708));
    next_mul_fu_635_p2 <= std_logic_vector(unsigned(phi_mul_reg_459) + unsigned(ap_const_lv17_12C));

    -- out_frame_address0 assign process. --
    out_frame_address0_assign_proc : process(tmp_24_reg_1046, tmp_23_reg_1077, ap_sig_cseq_ST_pp2_stg0_fsm_29, ap_reg_ppiten_pp2_it0, ap_sig_cseq_ST_st28_fsm_23, ap_sig_cseq_ST_st32_fsm_27, tmp_26_fu_913_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_27)) then 
            out_frame_address0 <= tmp_23_reg_1077(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_23)) then 
            out_frame_address0 <= tmp_24_reg_1046(9 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_29) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0))) then 
            out_frame_address0 <= tmp_26_fu_913_p1(9 - 1 downto 0);
        else 
            out_frame_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    -- out_frame_ce0 assign process. --
    out_frame_ce0_assign_proc : process(ap_sig_cseq_ST_pp2_stg0_fsm_29, ap_reg_ppiten_pp2_it0, ap_reg_ppstg_exitcond4_reg_1092_pp2_it1, ap_sig_ioackin_gmem_WREADY, ap_reg_ppiten_pp2_it2, grp_backsub_EM_ALGO_fu_552_ap_done, ap_sig_cseq_ST_st28_fsm_23, ap_sig_cseq_ST_st32_fsm_27)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_29) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond4_reg_1092_pp2_it1) and (ap_const_logic_0 = ap_sig_ioackin_gmem_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it2)))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_23) and not((ap_const_logic_0 = grp_backsub_EM_ALGO_fu_552_ap_done))) or (not((ap_const_logic_0 = grp_backsub_EM_ALGO_fu_552_ap_done)) and (ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_27)))) then 
            out_frame_ce0 <= ap_const_logic_1;
        else 
            out_frame_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_frame_d0 <= grp_backsub_EM_ALGO_fu_552_ap_return;

    -- out_frame_we0 assign process. --
    out_frame_we0_assign_proc : process(grp_backsub_EM_ALGO_fu_552_ap_done, ap_sig_cseq_ST_st28_fsm_23, ap_sig_cseq_ST_st32_fsm_27)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_23) and not((ap_const_logic_0 = grp_backsub_EM_ALGO_fu_552_ap_done))) or (not((ap_const_logic_0 = grp_backsub_EM_ALGO_fu_552_ap_done)) and (ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_27)))) then 
            out_frame_we0 <= ap_const_logic_1;
        else 
            out_frame_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl1_cast_fu_802_p1 <= std_logic_vector(resize(unsigned(p_shl1_fu_794_p3),13));
    p_shl1_fu_794_p3 <= (i_reg_518 & ap_const_lv1_0);
    p_shl_cast_fu_790_p1 <= std_logic_vector(resize(unsigned(p_shl_fu_782_p3),13));
    p_shl_fu_782_p3 <= (i_reg_518 & ap_const_lv3_0);

    -- parameters_address0 assign process. --
    parameters_address0_assign_proc : process(ap_reg_ppiten_pp0_it2, ap_sig_cseq_ST_st30_fsm_25, ap_sig_cseq_ST_st25_fsm_20, ap_sig_cseq_ST_st29_fsm_24, grp_backsub_EM_ALGO_fu_552_parameters_address0, ap_sig_cseq_ST_st28_fsm_23, ap_sig_cseq_ST_st32_fsm_27, tmp_6_fu_678_p1, tmp_12_fu_816_p1, tmp_18_fu_859_p1, tmp_22_fu_892_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_25)) then 
            parameters_address0 <= tmp_22_fu_892_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_24)) then 
            parameters_address0 <= tmp_18_fu_859_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_20)) then 
            parameters_address0 <= tmp_12_fu_816_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) then 
            parameters_address0 <= tmp_6_fu_678_p1(11 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_23) or (ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_27))) then 
            parameters_address0 <= grp_backsub_EM_ALGO_fu_552_parameters_address0;
        else 
            parameters_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    -- parameters_address1 assign process. --
    parameters_address1_assign_proc : process(ap_sig_cseq_ST_st30_fsm_25, ap_sig_cseq_ST_st25_fsm_20, ap_sig_cseq_ST_st29_fsm_24, ap_sig_cseq_ST_pp3_stg0_fsm_35, ap_reg_ppiten_pp3_it0, grp_backsub_EM_ALGO_fu_552_parameters_address1, ap_sig_cseq_ST_st28_fsm_23, ap_sig_cseq_ST_st32_fsm_27, tmp_14_fu_827_p1, tmp_16_fu_845_p1, tmp_20_fu_878_p1, tmp_28_fu_938_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_25)) then 
            parameters_address1 <= tmp_20_fu_878_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_24)) then 
            parameters_address1 <= tmp_16_fu_845_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_20)) then 
            parameters_address1 <= tmp_14_fu_827_p1(11 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_35) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it0))) then 
            parameters_address1 <= tmp_28_fu_938_p1(11 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_23) or (ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_27))) then 
            parameters_address1 <= grp_backsub_EM_ALGO_fu_552_parameters_address1;
        else 
            parameters_address1 <= "XXXXXXXXXXX";
        end if; 
    end process;


    -- parameters_ce0 assign process. --
    parameters_ce0_assign_proc : process(ap_sig_bdd_463, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_sig_cseq_ST_st30_fsm_25, ap_sig_cseq_ST_st25_fsm_20, ap_sig_cseq_ST_st29_fsm_24, grp_backsub_EM_ALGO_fu_552_parameters_ce0, ap_sig_cseq_ST_st28_fsm_23, ap_sig_cseq_ST_st32_fsm_27)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_25) or (ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_20) or (ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_24) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not((ap_sig_bdd_463 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then 
            parameters_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_23) or (ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_27))) then 
            parameters_ce0 <= grp_backsub_EM_ALGO_fu_552_parameters_ce0;
        else 
            parameters_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- parameters_ce1 assign process. --
    parameters_ce1_assign_proc : process(ap_sig_cseq_ST_st30_fsm_25, ap_sig_cseq_ST_st25_fsm_20, ap_sig_cseq_ST_st29_fsm_24, ap_sig_cseq_ST_pp3_stg0_fsm_35, ap_reg_ppiten_pp3_it0, ap_reg_ppstg_exitcond5_reg_1116_pp3_it1, ap_sig_ioackin_gmem_offset_WREADY, ap_reg_ppiten_pp3_it2, grp_backsub_EM_ALGO_fu_552_parameters_ce1, ap_sig_cseq_ST_st28_fsm_23, ap_sig_cseq_ST_st32_fsm_27)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_25) or (ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_20) or (ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_24) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_35) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it0) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond5_reg_1116_pp3_it1) and (ap_const_logic_0 = ap_sig_ioackin_gmem_offset_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it2)))))) then 
            parameters_ce1 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_23) or (ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_27))) then 
            parameters_ce1 <= grp_backsub_EM_ALGO_fu_552_parameters_ce1;
        else 
            parameters_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    -- parameters_d0 assign process. --
    parameters_d0_assign_proc : process(ap_reg_ppiten_pp0_it2, ap_sig_cseq_ST_st30_fsm_25, gmem_offset_addr_1_read_reg_999, ap_sig_cseq_ST_st25_fsm_20, ap_sig_cseq_ST_st29_fsm_24, grp_backsub_EM_ALGO_fu_552_parameters_d0, ap_sig_cseq_ST_st28_fsm_23, ap_sig_cseq_ST_st32_fsm_27)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_25)) then 
            parameters_d0 <= ap_const_lv32_3DB851EC;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_24)) then 
            parameters_d0 <= ap_const_lv32_45992000;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_20)) then 
            parameters_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) then 
            parameters_d0 <= gmem_offset_addr_1_read_reg_999;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_23) or (ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_27))) then 
            parameters_d0 <= grp_backsub_EM_ALGO_fu_552_parameters_d0;
        else 
            parameters_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- parameters_d1 assign process. --
    parameters_d1_assign_proc : process(ap_sig_cseq_ST_st30_fsm_25, ap_sig_cseq_ST_st25_fsm_20, ap_sig_cseq_ST_st29_fsm_24, grp_backsub_EM_ALGO_fu_552_parameters_d1, ap_sig_cseq_ST_st28_fsm_23, ap_sig_cseq_ST_st32_fsm_27)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_25)) then 
            parameters_d1 <= ap_const_lv32_3DB851EC;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_24)) then 
            parameters_d1 <= ap_const_lv32_45992000;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_20)) then 
            parameters_d1 <= ap_const_lv32_0;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_23) or (ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_27))) then 
            parameters_d1 <= grp_backsub_EM_ALGO_fu_552_parameters_d1;
        else 
            parameters_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- parameters_we0 assign process. --
    parameters_we0_assign_proc : process(ap_sig_bdd_463, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_sig_cseq_ST_st30_fsm_25, init_read_reg_943, ap_reg_ppstg_exitcond9_reg_990_pp0_it1, ap_sig_cseq_ST_st25_fsm_20, exitcond1_fu_730_p2, ap_sig_cseq_ST_st29_fsm_24, grp_backsub_EM_ALGO_fu_552_parameters_we0, ap_sig_cseq_ST_st28_fsm_23, ap_sig_cseq_ST_st32_fsm_27)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_25) or ((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_20) and not((ap_const_lv1_0 = init_read_reg_943)) and (ap_const_lv1_0 = exitcond1_fu_730_p2)) or (ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_24) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not((ap_sig_bdd_463 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond9_reg_990_pp0_it1)))) then 
            parameters_we0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_23) or (ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_27))) then 
            parameters_we0 <= grp_backsub_EM_ALGO_fu_552_parameters_we0;
        else 
            parameters_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- parameters_we1 assign process. --
    parameters_we1_assign_proc : process(ap_sig_cseq_ST_st30_fsm_25, init_read_reg_943, ap_sig_cseq_ST_st25_fsm_20, exitcond1_fu_730_p2, ap_sig_cseq_ST_st29_fsm_24, grp_backsub_EM_ALGO_fu_552_parameters_we1, ap_sig_cseq_ST_st28_fsm_23, ap_sig_cseq_ST_st32_fsm_27)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_25) or ((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_20) and not((ap_const_lv1_0 = init_read_reg_943)) and (ap_const_lv1_0 = exitcond1_fu_730_p2)) or (ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_24))) then 
            parameters_we1 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_23) or (ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_27))) then 
            parameters_we1 <= grp_backsub_EM_ALGO_fu_552_parameters_we1;
        else 
            parameters_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_cast_fu_617_p1 <= std_logic_vector(resize(unsigned(tmp_4_fu_607_p4),31));
    tmp_10_fu_662_p1 <= std_logic_vector(resize(unsigned(tmp_7_reg_980),64));
        tmp_11_cast_fu_812_p1 <= std_logic_vector(resize(signed(tmp_11_fu_806_p2),32));

    tmp_11_fu_806_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_790_p1) - unsigned(p_shl1_cast_fu_802_p1));
    tmp_12_fu_816_p1 <= std_logic_vector(resize(unsigned(tmp_11_cast_fu_812_p1),64));
    tmp_13_fu_821_p2 <= (tmp_11_cast_fu_812_p1 or ap_const_lv32_1);
    tmp_14_fu_827_p1 <= std_logic_vector(resize(unsigned(tmp_13_fu_821_p2),64));
        tmp_15_cast_fu_841_p1 <= std_logic_vector(resize(signed(tmp_15_fu_836_p2),32));

    tmp_15_fu_836_p2 <= std_logic_vector(unsigned(tmp_11_reg_1064) + unsigned(ap_const_lv13_2));
    tmp_16_fu_845_p1 <= std_logic_vector(resize(unsigned(tmp_15_cast_fu_841_p1),64));
        tmp_17_cast_fu_855_p1 <= std_logic_vector(resize(signed(tmp_17_fu_850_p2),32));

    tmp_17_fu_850_p2 <= std_logic_vector(unsigned(tmp_11_reg_1064) + unsigned(ap_const_lv13_3));
    tmp_18_fu_859_p1 <= std_logic_vector(resize(unsigned(tmp_17_cast_fu_855_p1),64));
        tmp_19_cast_fu_874_p1 <= std_logic_vector(resize(signed(tmp_19_fu_869_p2),32));

    tmp_19_fu_869_p2 <= std_logic_vector(unsigned(tmp_11_reg_1064) + unsigned(ap_const_lv13_4));
    tmp_20_fu_878_p1 <= std_logic_vector(resize(unsigned(tmp_19_cast_fu_874_p1),64));
        tmp_21_cast_fu_888_p1 <= std_logic_vector(resize(signed(tmp_21_fu_883_p2),32));

    tmp_21_fu_883_p2 <= std_logic_vector(unsigned(tmp_11_reg_1064) + unsigned(ap_const_lv13_5));
    tmp_22_fu_892_p1 <= std_logic_vector(resize(unsigned(tmp_21_cast_fu_888_p1),64));
    tmp_23_fu_864_p1 <= std_logic_vector(resize(unsigned(i_reg_518),64));
    tmp_24_fu_725_p1 <= std_logic_vector(resize(unsigned(j_reg_506),64));
    tmp_26_fu_913_p1 <= std_logic_vector(resize(unsigned(indvar2_reg_530),64));
    tmp_27_fu_683_p1 <= std_logic_vector(resize(unsigned(phi_mul_reg_459),33));
    tmp_28_fu_938_p1 <= std_logic_vector(resize(unsigned(indvar3_reg_541),64));
    tmp_29_fu_687_p2 <= std_logic_vector(unsigned(tmp_27_fu_683_p1) + unsigned(tmp_31_cast_reg_957));
        tmp_30_cast_fu_621_p1 <= std_logic_vector(resize(signed(frame_out),33));

        tmp_30_fu_692_p1 <= std_logic_vector(resize(signed(tmp_29_reg_1009),64));

        tmp_31_cast_fu_625_p1 <= std_logic_vector(resize(signed(frame_in),33));

    tmp_31_fu_832_p2 <= std_logic_vector(unsigned(tmp_27_reg_1004) + unsigned(tmp_30_cast_reg_952));
    tmp_32_fu_760_p1 <= std_logic_vector(resize(unsigned(tmp_s_fu_752_p3),64));
    tmp_33_fu_766_p2 <= (tmp_s_fu_752_p3 or ap_const_lv18_1);
    tmp_34_fu_772_p3 <= (ap_const_lv46_0 & tmp_33_fu_766_p2);
        tmp_36_fu_897_p1 <= std_logic_vector(resize(signed(tmp_31_reg_1072),64));

    tmp_4_fu_607_p4 <= para(31 downto 2);
    tmp_5_fu_653_p1 <= std_logic_vector(resize(unsigned(phi_mul9_reg_471),31));
    tmp_6_fu_678_p1 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_indvar_reg_482_pp0_it1),64));
    tmp_7_fu_657_p2 <= std_logic_vector(unsigned(tmp_5_fu_653_p1) + unsigned(tmp_10_cast_reg_947));
    tmp_8_fu_708_p1 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_indvar1_reg_494_pp1_it1),64));
    tmp_9_fu_746_p2 <= std_logic_vector(unsigned(i_cast8_fu_742_p1) + unsigned(phi_mul_reg_459));
    tmp_s_fu_752_p3 <= (tmp_9_fu_746_p2 & ap_const_lv1_0);
    x_1_fu_647_p2 <= std_logic_vector(unsigned(x_reg_447) + unsigned(ap_const_lv9_1));
end behav;
